<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Сущевский Дмитрий</title><link>https://blowin.github.io/portfolio/categories/programming/</link><description>Recent content in programming on Сущевский Дмитрий</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Wed, 08 Jun 2022 17:52:47 +0400</lastBuildDate><atom:link href="https://blowin.github.io/portfolio/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Слишком глубокий смысл</title><link>https://blowin.github.io/portfolio/posts/2022/06/%D1%81%D0%BB%D0%B8%D1%88%D0%BA%D0%BE%D0%BC-%D0%B3%D0%BB%D1%83%D0%B1%D0%BE%D0%BA%D0%B8%D0%B9-%D1%81%D0%BC%D1%8B%D1%81%D0%BB/</link><pubDate>Wed, 08 Jun 2022 17:52:47 +0400</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/06/%D1%81%D0%BB%D0%B8%D1%88%D0%BA%D0%BE%D0%BC-%D0%B3%D0%BB%D1%83%D0%B1%D0%BE%D0%BA%D0%B8%D0%B9-%D1%81%D0%BC%D1%8B%D1%81%D0%BB/</guid><description>Мужество — лучшее смертоносное оружие: мужество убивает даже сострадание. Сострадание же есть наиболее глубокая пропасть: ибо, насколько глубоко человек заглядывает в жизнь, настолько глубоко заглядывает он и в страдание.
Фридрих Вильгельм Ницше
Проблема Обращали ли вы внимание, как тяжело читать код с большой вложенностью? Думаю, что да. Такой код очень тяжел в понимании и поддержании из-за чего подвержен большему количеству ошибок. В этой статье рассмотрим способы решения данной проблемы и посмотрим как меняется код в лучшую сторону, при соблюдении простых правил.</description></item><item><title>Electron + Blazor = ♥</title><link>https://blowin.github.io/portfolio/posts/2022/05/electron--blazor/</link><pubDate>Fri, 20 May 2022 17:15:40 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/electron--blazor/</guid><description>Опишу, как можно собрать blazor проект с использованием electron. Это можно использовать, для любого ASP проекта.
Шаги Устанавливаем electronNet.cli (один раз) dotnet tool install --global electronNet.cli Установить nuget пакет ElectronNET.API Добавить в Startup создание окна if (HybridSupport.IsElectronActive) { Task.Run(async () =&amp;gt; { await Electron.WindowManager.CreateBrowserViewAsync(); await Electron.WindowManager.CreateWindowAsync(new BrowserWindowOptions { MinWidth = 700, MinHeight = 500, Center = true }); }); } Добавить UseElectron в Program.</description></item><item><title>Примитивизм</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D0%B8%D0%B7%D0%BC/</link><pubDate>Thu, 12 May 2022 20:21:29 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D0%B8%D0%B7%D0%BC/</guid><description>На протяжении всего своего пути в программировании я сталкиваюсь с проблемой повсеместного использования примитивных типов, они повсюду.
Хотя мы и имитируем реальный мир, но мы раз за разом используем примитивные типы, для всего многообразия понятий, которые мы моделируем в коде. Эти понятия имеют больше ограничений, чем тип, который мы используем. Чтобы решить эту проблему, существует такое понятие как Value Object, оно отображает конкретное понятие с инкапсулированной логикой.
Что не так с примитивами?</description></item><item><title>Конструируй правильно</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%B8%D1%80%D1%83%D0%B9-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE/</link><pubDate>Wed, 11 May 2022 17:29:30 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%B8%D1%80%D1%83%D0%B9-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE/</guid><description>Конструктор - это точка входа в любой объект. Это метод, который служит инициализатором вашего типа, проверяет инварианты, переводит объект в состояние пригодное для использования.
Каждый день мы пишем свои типы, они в дальнейшем будут использовать и наши коллеги. Но сталкивались ли вы с тем, что после создания объекта вы получали ошибки связанные с тем, что после создания объекта какие-то из полей не были проинициализированы? Если не встречали, то вам очень повезло, к сожалению, я не из таких людей.</description></item><item><title>Анатомия декоратора</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</link><pubDate>Thu, 05 May 2022 20:30:50 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</guid><description>Как известно, декоратор является одним из структурных паттернов проектирования. Его удобно комбинировать с другими паттернами для достижения гибкой и расширяемой системы, без изменения существующего кода.
Разбираемся на примере логирования Допустим, перед нами появилась задача написать логирование для нашего приложения. Что же, давайте реализуем:
public enum LogLevel { Debug, Info, Warn, Error, Fatal } public interface ILogger : IDisposable { void Log(LogLevel level, string message, params object[] args); } public class ConsoleLogger : ILogger { public void Log(LogLevel level, string message, params object[] args) { Console.</description></item><item><title>Дружелюбная Factory</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%B4%D1%80%D1%83%D0%B6%D0%B5%D0%BB%D1%8E%D0%B1%D0%BD%D0%B0%D1%8F-factory/</link><pubDate>Sun, 01 May 2022 19:46:31 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%B4%D1%80%D1%83%D0%B6%D0%B5%D0%BB%D1%8E%D0%B1%D0%BD%D0%B0%D1%8F-factory/</guid><description>Сталкивались ли вы с проблемой, когда у вас есть factory, вы её создаёте там, где вам нужен определенный тип объекта и вы знаете, что нет необходимости передавать все зависимости в конструктор factory, так как они просто не нужны для создания. Тогда вы передаёте default/null?
Как правило, выглядит так себе:
var factory = new ObjFactory(null, docId, dbService, null, null); var doc = factory.Create(ObjType.Doc); У данного подхода я не вижу плюсов от слова &amp;lsquo;совсем&amp;rsquo;.</description></item><item><title>Enum и switch, сквозь года</title><link>https://blowin.github.io/portfolio/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</link><pubDate>Fri, 29 Apr 2022 19:16:46 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</guid><description>Пару лет назад я написал о Enum и switch и что с ним не так. По прошествии нескольких лет, произошли определенные переосмысления, которые выросли в данную статью.
Проблема Проблема остаётся той же:
огромные switch по всему коду проблемы с поддержкой этого добра. Что использовать для решения проблемы Будем использовать библиотеку SmartEnum.
На самом деле подобный функционал реализуется за 15 минут, если по каким-то причинам вы не хотите тянуть лишнюю зависимость в ваше детище ваш проект.</description></item><item><title>Enum и switch, и что с ними не так</title><link>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</link><pubDate>Fri, 04 Sep 2020 14:00:00 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</guid><description>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?
Идея Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!
Идея состоит в том, чтобы заменить использование switch паттерном visitor.
Пример 1 Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</description></item></channel></rss>