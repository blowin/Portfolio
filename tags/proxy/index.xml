<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>proxy on Сущевский Дмитрий</title><link>https://blowin.github.io/blog/tags/proxy/</link><description>Recent content in proxy on Сущевский Дмитрий</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Mon, 13 Mar 2023 18:33:31 +0300</lastBuildDate><atom:link href="https://blowin.github.io/blog/tags/proxy/index.xml" rel="self" type="application/rss+xml"/><item><title>Прокси, Декоратор и их отличия</title><link>https://blowin.github.io/blog/posts/2023/03/%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80-%D0%B8-%D0%B8%D1%85-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F/</link><pubDate>Mon, 13 Mar 2023 18:33:31 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2023/03/%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80-%D0%B8-%D0%B8%D1%85-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F/</guid><description>Искусство есть посредник того, чего нельзя высказать.
Иоганн Вольфганг фон Гёте
Введение Шаблоны проектирования - это важные инструменты для разработчиков программного обеспечения, позволяющие создавать многократно используемый и сопровождаемый код. Двумя популярными паттернами являются паттерн &amp;ldquo;Прокси&amp;rdquo; и паттерн &amp;ldquo;Декоратор&amp;rdquo;. Хотя эти два паттерна довольно похожи, у них разное применение и назначение. В этой статье мы рассмотрим различия между паттернами Proxy и Decorator.
Отличия Proxy от Decorator Шаблон Proxy используется в качестве прослойки для другого объекта, чтобы контролировать доступ к нему.</description></item><item><title>Анатомия декоратора</title><link>https://blowin.github.io/blog/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</link><pubDate>Thu, 05 May 2022 20:30:50 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</guid><description>Как известно, декоратор является одним из структурных паттернов проектирования. Его удобно комбинировать с другими паттернами для достижения гибкой и расширяемой системы, без изменения существующего кода.
Разбираемся на примере логирования Допустим, перед нами появилась задача написать логирование для нашего приложения. Что же, давайте реализуем:
public enum LogLevel { Debug, Info, Warn, Error, Fatal } public interface ILogger : IDisposable { void Log(LogLevel level, string message, params object[] args); } public class ConsoleLogger : ILogger { public void Log(LogLevel level, string message, params object[] args) { Console.</description></item></channel></rss>