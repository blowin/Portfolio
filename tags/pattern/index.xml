<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pattern on Сущевский Дмитрий</title><link>https://blowin.github.io/blog/tags/pattern/</link><description>Recent content in pattern on Сущевский Дмитрий</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Mon, 13 Mar 2023 18:33:31 +0300</lastBuildDate><atom:link href="https://blowin.github.io/blog/tags/pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Прокси, Декоратор и их отличия</title><link>https://blowin.github.io/blog/posts/2023/03/%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80-%D0%B8-%D0%B8%D1%85-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F/</link><pubDate>Mon, 13 Mar 2023 18:33:31 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2023/03/%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80-%D0%B8-%D0%B8%D1%85-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F/</guid><description>Искусство есть посредник того, чего нельзя высказать.
Иоганн Вольфганг фон Гёте
Введение Шаблоны проектирования - это важные инструменты для разработчиков программного обеспечения, позволяющие создавать многократно используемый и сопровождаемый код. Двумя популярными паттернами являются паттерн &amp;ldquo;Прокси&amp;rdquo; и паттерн &amp;ldquo;Декоратор&amp;rdquo;. Хотя эти два паттерна довольно похожи, у них разное применение и назначение. В этой статье мы рассмотрим различия между паттернами Proxy и Decorator.
Отличия Proxy от Decorator Шаблон Proxy используется в качестве прослойки для другого объекта, чтобы контролировать доступ к нему.</description></item><item><title>Как правильно быть одиноким?</title><link>https://blowin.github.io/blog/posts/2022/07/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%B8%D0%BC/</link><pubDate>Thu, 07 Jul 2022 08:28:55 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2022/07/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%B8%D0%BC/</guid><description>Мне было одиноко, но удобно.
Дэниел Фордж
Введение Сегодня будем говорить про Singleton и то как стоит его использовать.
Одиночка (англ. Singleton) — порождающий шаблон проектирования, гарантирующий, что в однопоточном приложении будет единственный экземпляр некоторого класса, и предоставляющий глобальную точку доступа к этому экземпляру. (источник - Wiki)
В качестве примера будем использовать следующую сущность.
public record Status(Guid Id, string Name); Проблема Приходилось ли вам видеть код подобного рода?</description></item><item><title>Анатомия декоратора</title><link>https://blowin.github.io/blog/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</link><pubDate>Thu, 05 May 2022 20:30:50 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</guid><description>Как известно, декоратор является одним из структурных паттернов проектирования. Его удобно комбинировать с другими паттернами для достижения гибкой и расширяемой системы, без изменения существующего кода.
Разбираемся на примере логирования Допустим, перед нами появилась задача написать логирование для нашего приложения. Что же, давайте реализуем:
public enum LogLevel { Debug, Info, Warn, Error, Fatal } public interface ILogger : IDisposable { void Log(LogLevel level, string message, params object[] args); } public class ConsoleLogger : ILogger { public void Log(LogLevel level, string message, params object[] args) { Console.</description></item><item><title>Дружелюбная Factory</title><link>https://blowin.github.io/blog/posts/2022/05/%D0%B4%D1%80%D1%83%D0%B6%D0%B5%D0%BB%D1%8E%D0%B1%D0%BD%D0%B0%D1%8F-factory/</link><pubDate>Sun, 01 May 2022 19:46:31 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2022/05/%D0%B4%D1%80%D1%83%D0%B6%D0%B5%D0%BB%D1%8E%D0%B1%D0%BD%D0%B0%D1%8F-factory/</guid><description>Сталкивались ли вы с проблемой, когда у вас есть factory, вы её создаёте там, где вам нужен определенный тип объекта и вы знаете, что нет необходимости передавать все зависимости в конструктор factory, так как они просто не нужны для создания. Тогда вы передаёте default/null?
Как правило, выглядит так себе:
var factory = new ObjFactory(null, docId, dbService, null, null); var doc = factory.Create(ObjType.Doc); У данного подхода я не вижу плюсов от слова &amp;lsquo;совсем&amp;rsquo;.</description></item><item><title>Enum и switch, сквозь года</title><link>https://blowin.github.io/blog/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</link><pubDate>Fri, 29 Apr 2022 19:16:46 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</guid><description>Пару лет назад я написал о Enum и switch и что с ним не так. По прошествии нескольких лет, произошли определенные переосмысления, которые выросли в данную статью.
Проблема Проблема остаётся той же:
огромные switch по всему коду проблемы с поддержкой этого добра. Что использовать для решения проблемы Будем использовать библиотеку SmartEnum.
На самом деле подобный функционал реализуется за 15 минут, если по каким-то причинам вы не хотите тянуть лишнюю зависимость в ваше детище ваш проект.</description></item><item><title>Enum и switch, и что с ними не так</title><link>https://blowin.github.io/blog/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</link><pubDate>Fri, 04 Sep 2020 14:00:00 +0300</pubDate><guid>https://blowin.github.io/blog/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</guid><description>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?
Идея Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!
Идея состоит в том, чтобы заменить использование switch паттерном visitor.
Пример 1 Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</description></item></channel></rss>