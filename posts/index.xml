<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Блог on Сущевский Дмитрий</title><link>https://blowin.github.io/portfolio/posts/</link><description>Recent content in Блог on Сущевский Дмитрий</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blowin.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Enum и switch, и что с ними не так</title><link>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</link><pubDate>Fri, 04 Sep 2020 14:00:00 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</guid><description>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?
Идея Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!
Идея состоит в том, чтобы заменить использование switch паттерном visitor.
Пример 1 Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</description><content type="html"><![CDATA[<p>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?</p>
<!-- raw HTML omitted -->
<h1 id="идея">Идея</h1>
<hr>
<!-- raw HTML omitted -->
<p>Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!</p>
<p>Идея состоит в том, чтобы заменить использование switch паттерном visitor.</p>
<!-- raw HTML omitted -->
<h1 id="пример-1">Пример 1</h1>
<hr>
<!-- raw HTML omitted -->
<p>Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</p>
<!-- raw HTML omitted -->
<p>Определим файл <strong>DocumentType.cs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> DocumentType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Invoice,
</span></span><span style="display:flex;"><span>        PrepaymentAccount
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IDocumentVisitor</span>&lt;<span style="color:#66d9ef">out</span> T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        T VisitInvoice();
</span></span><span style="display:flex;"><span>        T VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DocumentTypeExt</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Accept&lt;T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, IDocumentVisitor&lt;T&gt; visitor)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> (self)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.Invoice:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitInvoice();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.PrepaymentAccount:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(self), self, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>И да, я предлагаю определять все связанные типы в одном файле, что не является идиоматичным для .Net разработчика. Но иногда это очень ухудшает упрощает понимание кода.</p>
<!-- raw HTML omitted -->
<p>Опишем visitor который будет искать в базе нужный документ <strong>DatabaseSearchVisitor.cs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseSearchVisitor</span> : IDocumentVisitor&lt;IDocument&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> ApiId <span style="color:#ae81ff">_</span>id;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> Database <span style="color:#ae81ff">_d</span>b;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> DatabaseSearchVisitor(ApiId id, Database db)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>id = id;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_d</span>b = db;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> IDocument VisitInvoice() =&gt; <span style="color:#ae81ff">_d</span>b.SearchInvoice(<span style="color:#ae81ff">_</span>id);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> IDocument VisitPrepaymentAccount() =&gt; <span style="color:#ae81ff">_d</span>b.SearchPrepaymentAccount(<span style="color:#ae81ff">_</span>id);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>И потом его использование:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> searchVisitor = <span style="color:#66d9ef">new</span> DatabaseSearchVisitor(doc.Id, <span style="color:#ae81ff">_d</span>b);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Accept(searchVisitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<h1 id="пример-2">Пример 2</h1>
<hr>
<!-- raw HTML omitted -->
<p>У нас есть события, которые выглядят следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> PurseEventType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Increase,
</span></span><span style="display:flex;"><span>        Decrease,
</span></span><span style="display:flex;"><span>        Block,
</span></span><span style="display:flex;"><span>        Unlock
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurseEvent</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEventType Type { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Json { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEvent(PurseEventType type, <span style="color:#66d9ef">string</span> json)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Type = type;
</span></span><span style="display:flex;"><span>            Json = json;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Мы хотим отправлять уведомления пользователю на определенный тип событий. Тогда реализуем visitor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IPurseEventTypeVisitor</span>&lt;<span style="color:#66d9ef">out</span> T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        T VisitIncrease();
</span></span><span style="display:flex;"><span>        T VisitDecrease();
</span></span><span style="display:flex;"><span>        T VisitBlock();
</span></span><span style="display:flex;"><span>        T VisitUnlock();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurseEventTypeNotificationVisitor</span> : IPurseEventTypeVisitor&lt;Missing&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> INotificationManager <span style="color:#ae81ff">_</span>notificationManager;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PurseEventParser <span style="color:#ae81ff">_</span>eventParser;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PurseEvent <span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEventTypeNotificationVisitor(PurseEvent @event, PurseEventParser eventParser, INotificationManager notificationManager)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager = notificationManager;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span> = @event;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>eventParser = eventParser;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitIncrease() =&gt; Missing.Value;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitDecrease() =&gt; Missing.Value;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitBlock()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> blockEvent = <span style="color:#ae81ff">_</span>eventParser.ParseBlock(<span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager.NotifyBlockPurseEvent(blockEvent);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Missing.Value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitUnlock()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> blockEvent = <span style="color:#ae81ff">_</span>eventParser.ParseUnlock(<span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager.NotifyUnlockPurseEvent(blockEvent);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Missing.Value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Для примера не будем ничего возвращать. Для этого можно воспользоваться типом Missing из System.Reflection или же написать тип Unit. В реальном проекте возвращался бы Result, например, с информацией об ошибке, если такие имеются.</p>
<!-- raw HTML omitted -->
<p>И пример использования:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SendNotification(PurseEvent @event)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> notificationVisitor = <span style="color:#66d9ef">new</span> PurseEventTypeNotificationVisitor(@event, <span style="color:#ae81ff">_</span>eventParser, <span style="color:#ae81ff">_</span>notificationManager);
</span></span><span style="display:flex;"><span>        @event.Type.Accept(notificationVisitor);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<h1 id="дополнение">Дополнение</h1>
<hr>
<!-- raw HTML omitted -->
<h3 id="если-нужно-быстрее">Если нужно быстрее</h3>
<!-- raw HTML omitted -->
<p>Если нужно использовать такой подход там, где важна производительность, в качестве visitor можно использовать структуры. Тогда код изменится следующим образом.</p>
<!-- raw HTML omitted -->
<p>Метод расширение:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Accept&lt;TVisitor, T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, <span style="color:#66d9ef">in</span> TVisitor visitor)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">where</span> TVisitor : IDocumentVisitor&lt;T&gt;
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> (self)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.Invoice:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitInvoice();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.PrepaymentAccount:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(self), self, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Сам visitor остаётся прежним, только меняем class на struct.</p>
<!-- raw HTML omitted -->
<p>И сам код обновления документа выглядит не так удобно, но работает быстро:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> searchVisitor = <span style="color:#66d9ef">new</span> DatabaseSearchVisitor(doc.Id, <span style="color:#ae81ff">_d</span>b);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Accept&lt;DatabaseSearchVisitor, IDocument&gt;(searchVisitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>При таком использовании generic, необходимо уточнять типы самому, так как компилятор не хочет способен вывести их автоматически.</p>
<!-- raw HTML omitted -->
<h3 id="читабельность-и-in-place-реализация">Читабельность и in-place реализация</h3>
<!-- raw HTML omitted -->
<p>Если нужно реализовать логику только в одном месте, то часто visitor — громоздко и не удобно. Поэтому есть альтернативное решение <strong>match</strong>.</p>
<!-- raw HTML omitted -->
<p>Сразу пример со структурой:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Match&lt;T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, Func&lt;T&gt; invoiceCase, Func&lt;T&gt; prepaymentAccountCase)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> visitor = <span style="color:#66d9ef">new</span> FuncVisitor&lt;T&gt;(invoiceCase, prepaymentCase);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self.Accept&lt;FuncVisitor&lt;T&gt;, T&gt;(visitor);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Сам <strong>FuncVisitor</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">FuncVisitor</span>&lt;T&gt; : IDocumentVisitor&lt;T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;T&gt; <span style="color:#ae81ff">_</span>invoiceCase;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;T&gt; <span style="color:#ae81ff">_</span>prepaymentAccountCase;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> FuncVisitor(Func&lt;T&gt; invoiceCase, Func&lt;T&gt; prepaymentAccountCase)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>invoiceCase = invoiceCase;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>prepaymentAccountCase = prepaymentAccountCase;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> T VisitInvoice() =&gt; <span style="color:#ae81ff">_</span>invoiceCase();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> T VisitPrepaymentAccount() =&gt; <span style="color:#ae81ff">_</span>prepaymentAccountCase();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Использование <strong>match</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Match(
</span></span><span style="display:flex;"><span>        () =&gt; <span style="color:#ae81ff">_d</span>b.SearchInvoice(doc.Id),
</span></span><span style="display:flex;"><span>        () =&gt; <span style="color:#ae81ff">_d</span>b.SearchPrepaymentAccount(doc.Id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><!-- raw HTML omitted -->
<h2 id="итог">Итог</h2>
<!-- raw HTML omitted -->
<p>При добавлении нового значения в enum необходимо:</p>
<!-- raw HTML omitted -->
<p>   1.  Добавить метод в интерфейс.</p>
<p>   2.  Добавить его использование в метод расширение.</p>
<!-- raw HTML omitted -->
<p>Для остальных мест компилятор подскажет нам, где необходимо реализовать новый метод.<br>
Таким образом мы избавляемся от проблемы забытого case в switch.</p>
<!-- raw HTML omitted -->
<p>Это все еще не серебряная пуля, но может здорово помочь в работе с enum.</p>
<!-- raw HTML omitted -->
<h2 id="ссылки">Ссылки</h2>
<!-- raw HTML omitted -->
<ul>
<li><a href="https://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/">https://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Unit_type">https://en.wikipedia.org/wiki/Unit_type</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results">https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results</a></li>
</ul>
]]></content></item></channel></rss>