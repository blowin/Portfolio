<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Блог on Сущевский Дмитрий</title><link>https://blowin.github.io/portfolio/posts/</link><description>Recent content in Блог on Сущевский Дмитрий</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blowin.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Начинаем действовать</title><link>https://blowin.github.io/portfolio/posts/2022/07/%D0%BD%D0%B0%D1%87%D0%B8%D0%BD%D0%B0%D0%B5%D0%BC-%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%BE%D0%B2%D0%B0%D1%82%D1%8C/</link><pubDate>Wed, 13 Jul 2022 07:56:10 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/07/%D0%BD%D0%B0%D1%87%D0%B8%D0%BD%D0%B0%D0%B5%D0%BC-%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%BE%D0%B2%D0%B0%D1%82%D1%8C/</guid><description>Меня не пугают никакие действия, куда страшнее бездействие.
Майкл Скофилд
Введение Поговорим про GitHub Actions, этот механизм позволяет выполнять огромное количество работы, включая CI/CD.
CI/CD - это комбинация непрерывной интеграции (continuous integration) и непрерывного развертывания (continuous delivery или continuous deployment) программного обеспечения в процессе разработки. CI/CD объединяет разработку, тестирования и развёртывания приложения.(источник - Wiki)
Разберём, как можно настроить сборку и запуск тестов для .NET проекта, с использованием GitHub Actions.</description><content type="html"><![CDATA[<blockquote>
<p>Меня не пугают никакие действия, куда страшнее бездействие.</p>
<p><em>Майкл Скофилд</em></p>
</blockquote>
<h1 id="введение">Введение</h1>
<p>Поговорим про 
<a href="https://docs.github.com/en/actions" target="_blank">GitHub Actions</a>, этот механизм позволяет выполнять огромное количество работы, включая CI/CD.</p>
<p>CI/CD - это комбинация непрерывной интеграции (continuous integration) и непрерывного развертывания (continuous delivery или continuous deployment) программного обеспечения в процессе разработки. CI/CD объединяет разработку, тестирования и развёртывания приложения.(источник - Wiki)</p>
<p>Разберём, как можно настроить сборку и запуск тестов для .NET проекта, с использованием GitHub Actions.</p>
<h1 id="проблема">Проблема</h1>
<p>Необходимо настроить автоматическую сборку проекта с последующим запуском тестов.</p>
<p>Нужно запускать эти действия при коммите в репозиторий или создании pull request, чтобы обнаружить очевидные проблемы, не доходя до стадии code rewiew.</p>
<h1 id="решение">Решение</h1>
<p>Создадим GitHub Actions и опишем его в ручную.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Даём название нашему action&#39;у</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">ci</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Указываем, на какие действия будет реагировать наш action</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Реагируем на пуш в любую ветку, при необходимости, это можно ограничить (см документацию)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># не реагируем на изменение README.md</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">paths-ignore</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#39;README.md&#39;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Реагируем на создание pull request</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pull_request</span>:    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># не реагируем на изменение README.md</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">paths-ignore</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#39;README.md&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Запускаем наш action на последней версии ubuntu</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Описываем шаги нашего action&#39;а</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Даём название (скачиваем актуальную версию нашего кода)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Используем уже готовый action, из существует огромное количество, можно посмотреть тут https://github.com/marketplace?type=actions</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Передаём параметры нашему actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup .NET</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Устанавливаем на нашу ubuntu dotnet</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-dotnet@v1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">dotnet-version</span>: <span style="color:#e6db74">&#39;6.0.x&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Скачиваем зависимости, передав папку с sln файлом (делаем это отдельным действием, чтобы потом не делать это повторно для тестов)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Restore dependencies</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet restore &#34;src&#34;</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Собираем наш проект, указывая, что не нужно делать restore зависимостей</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet build &#34;src/ProjectName&#34; --no-restore</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Запускаем тесты нашего проекта</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Test</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">dotnet test &#34;src/ProjectName.Tests&#34; --no-restore --verbosity normal</span>
</span></span></code></pre></div><p>Вот и всё, наш action готов и теперь при создании коммита или pull request, мы будем видеть выполнились ли эти действия и как-то реагировать на них.</p>
<p>Рядом с коммитом можно увидеть статус выполнения.</p>
<p>Так будет выглядеть успешное выполнение.</p>
<p><img src="success.png" alt="Успешное выполнение"></p>
<p>Так будет выглядеть выполнение с ошибкой.</p>
<p><img src="unsuccess.png" alt="Ошибка при выполнении"></p>
<h1 id="итог">Итог</h1>
<p>Была описана примитивная настройка github action, но уже она может очень помочь в разработке и упростить контроль кода в проекте.</p>
<p>Мною описана лишь небольшая часть возможностей, для полного изучения github actions читайте документацию.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://docs.github.com/en/actions" target="_blank">GitHub Actions</a></li>
<li>
<a href="https://ru.wikipedia.org/wiki/CI/CD" target="_blank">CI/CD</a></li>
</ul>
]]></content></item><item><title>Как правильно быть одиноким?</title><link>https://blowin.github.io/portfolio/posts/2022/07/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%B8%D0%BC/</link><pubDate>Thu, 07 Jul 2022 08:28:55 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/07/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%B8%D0%BC/</guid><description>Мне было одиноко, но удобно.
Дэниел Фордж
Введение Сегодня будем говорить про Singleton и то как стоит его использовать.
Одиночка (англ. Singleton) — порождающий шаблон проектирования, гарантирующий, что в однопоточном приложении будет единственный экземпляр некоторого класса, и предоставляющий глобальную точку доступа к этому экземпляру. (источник - Wiki)
В качестве примера будем использовать следующую сущность.
public record Status(Guid Id, string Name); Проблема Приходилось ли вам видеть код подобного рода?</description><content type="html"><![CDATA[<blockquote>
<p>Мне было одиноко, но удобно.</p>
<p><em>Дэниел Фордж</em></p>
</blockquote>
<h1 id="введение">Введение</h1>
<p>Сегодня будем говорить про Singleton и то как стоит его использовать.</p>
<p>Одиночка (англ. Singleton) — порождающий шаблон проектирования, гарантирующий, что в однопоточном приложении будет единственный экземпляр некоторого класса, и предоставляющий глобальную точку доступа к этому экземпляру. (источник - Wiki)</p>
<p>В качестве примера будем использовать следующую сущность.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">Status</span>(Guid Id, <span style="color:#66d9ef">string</span> Name);
</span></span></code></pre></div><h1 id="проблема">Проблема</h1>
<p>Приходилось ли вам видеть код подобного рода?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StatusLoader</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Status[] Load()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// http/db call </span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Array.Empty&lt;Status&gt;();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Используем</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> statuses = StatusLoader.Load();
</span></span></code></pre></div><p>Что в этом коде плохо? На самом деле всё:</p>
<ul>
<li>Большая связанность</li>
<li>Нет возможности заменить реализацию</li>
<li>Нет возможности расширить реализацию</li>
</ul>
<h1 id="решение">Решение</h1>
<p>Что делать, если <del>чешутся руки</del> очень хочется? Точно никогда не использовать <em>static class</em>.</p>
<p>Статические классы можно использовать только если нужен класс с <em>extension</em>, во всех остальных случаях нужно реализовывать правильный singleton.</p>
<p>Что я имею в виду под правильный singleton&rsquo;ом?</p>
<ul>
<li>У него есть свойство <em>instance</em></li>
<li>Потокобезопасный</li>
<li>Расширяемый</li>
<li>Заменяемый</li>
</ul>
<p>Нужно соблюдать дополнительные правила, чтобы наш код не превратился в такой.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> statuses = StatusLoader.Instance.Load();
</span></span></code></pre></div><p>Для этого мы НИКОГДА не обращаемся напрямую к свойству instance, для вызова метода/свойства. Всегда требуем в конструктор наш объект, а уже работаем с ним, как с обычным объектом.</p>
<p>Правильный StatusLoader будет выглядеть следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IStatusLoader</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Status[] Load();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StatusLoader</span> : IStatusLoader
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> Lazy&lt;StatusLoader&gt; LazyInstance = <span style="color:#66d9ef">new</span> Lazy&lt;StatusLoader&gt;(() =&gt; <span style="color:#66d9ef">new</span> StatusLoader());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> StatusLoader Instance =&gt; LazyInstance.Value;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Status[] Load()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// http/db call </span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Array.Empty&lt;Status&gt;();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>При таком подходе, мы можем реализовывать интерфейсы и в классе, где нам нужен <em>StatusLoader.Instance</em>, мы в конструктор передаём <em>IStatusLoader</em>.</p>
<p>При таком подходе легко пишутся тесты и расширяется реализация, например, добавлением кэширования. Это можно сделать написанием прокси или созданием новых наследников.</p>
<p>Пример кэширующего прокси:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CacheStatusLoader</span> : IStatusLoader
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IStatusLoader <span style="color:#ae81ff">_</span>origin;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Status[]? <span style="color:#ae81ff">_</span>cacheResult;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> CacheStatusLoader(IStatusLoader origin) =&gt; <span style="color:#ae81ff">_</span>origin = origin;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Status[] Load() =&gt; <span style="color:#ae81ff">_</span>cacheResult ??= <span style="color:#ae81ff">_</span>origin.Load() ?? Array.Empty&lt;Status&gt;();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Теперь можно передавать загручик следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> loader = <span style="color:#66d9ef">new</span> CacheStatusLoader(StatusLoader.Instance);
</span></span><span style="display:flex;"><span>DoSomeWork(loader);
</span></span></code></pre></div><h1 id="итог">Итог</h1>
<p>Не используйте статические классы.</p>
<p>Если хотите сделать статический класс или он у вас уже имеется, то делайте это через singleton, при этом НИКОГДА не вызывайте методы следующим образом <em>Singleton.Instance.Do()</em>.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank">Singleton pattern</a></li>
</ul>
]]></content></item><item><title>Объективная значимость</title><link>https://blowin.github.io/portfolio/posts/2022/06/%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F-%D0%B7%D0%BD%D0%B0%D1%87%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C/</link><pubDate>Wed, 22 Jun 2022 12:15:01 +0400</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/06/%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F-%D0%B7%D0%BD%D0%B0%D1%87%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C/</guid><description>Вот так и впадают в заблуждение — уменьшая значимость важных вещей.
Настоящий детектив
Введение Сегодня поговорим о таком понятии как &amp;lsquo;Value Object&amp;rsquo;. VO часто используется в Domain Driven Design (DDD).
Value Object - это небольшой объект, представляющий простую сущность, равенство которой не основано на идентичности: т.е. два объекта значений равны, когда они имеют одинаковое значение, не обязательно являясь одним и тем же объектом. (Далее VO)
Отличительные черты VO:</description><content type="html"><![CDATA[<blockquote>
<p>Вот так и впадают в заблуждение — уменьшая значимость важных вещей.</p>
<p><em>Настоящий детектив</em></p>
</blockquote>
<h1 id="введение">Введение</h1>
<p>Сегодня поговорим о таком понятии как &lsquo;Value Object&rsquo;. VO часто используется в 
<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank">Domain Driven Design (DDD)</a>.</p>
<p>
<a href="https://en.wikipedia.org/wiki/Value_object#:~:text=In%20computer%20science%2C%20a%20value,money%20or%20a%20date%20range." target="_blank">Value Object</a> - это небольшой объект, представляющий простую сущность, равенство которой не основано на идентичности: т.е. два объекта значений равны, когда они имеют одинаковое значение, не обязательно являясь одним и тем же объектом. (Далее VO)</p>
<p>Отличительные черты VO:</p>
<ol>
<li>Не имеет уникального идентификатора. (определяется совокупностью полей)</li>
<li>Неизменяемый.</li>
<li>Два VO с одинаковыми полями равны. (равенство не по reference, а по значениям)</li>
<li>Может в себе содержать другие VO, но ни в коем случае не Entity (объекты с уникальностью по Id, они как правило изменяемые).</li>
</ol>
<h2 id="не-имеет-уникального-идентификатора">Не имеет уникального идентификатора</h2>
<p>Для записей в базу мы генерируем уникальный идентификатор и даже, если у двух строк поля будут равны, уникальность строки определяется по 
<a href="https://en.wikipedia.org/wiki/Primary_key" target="_blank">primary key</a>. В случае VO это не так, уникальность определяется по всем полям. Поэтому сравнение производится по значению, а не по ссылке.</p>
<h2 id="сравнение-по-значению">Сравнение по значению</h2>
<p>Два объекта равны, если все их поля равны. Благодаря этому свойству их можно 
<a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%8D%D1%88" target="_blank">кэшировать</a>, это возможно так как VO неизменяемы.</p>
<h2 id="почему-не-использовать-примитивные-типы">Почему не использовать примитивные типы?</h2>
<ul>
<li>Примитивные значения имеют большой диапазон доступных значений.</li>
<li>Наш VO может представляться совокупностью полей. Например, adress.</li>
<li>Мы не можем добавить какую-то логику работы.</li>
<li>Валидации, мы контролируем состояние нашего объекта.</li>
</ul>
<p>К примеру нам необходимо представить email в приложении. Остановись на 5 минут и подумай &ldquo;как бы я описал это в коде&rdquo;.</p>
<p>Многие использовали просто строку для этого, но в строке есть большое количество проблем, одна из которых - она обладает огромным диапазон возможных значений. В нашем случае нам интересны только строки в определенном формате. Т.е email, это всего лишь подмножество бесконечных возможных сочетаний строки. Наверняка у нас он ещё должен иметь определенную длину.</p>
<p><img src="string_and_email_subset.png" alt="Subset"></p>
<h1 id="способы-реализации">Способы реализации</h1>
<p>Для создания VO, можно использовать record, он уже из коробки генерирует основной код, для VO. Если нам не доступен функционал record, то мы можем реализовать это в ручную. Сейчас это не проблема, когда среда разработки помогает сгенерировать необходимый код.</p>
<p>В качестве VO можно использовать как класс, так и структуру. Если вы боитесь большого количества аллокаций, то структура отличный кандидат, для использования его в качестве VO.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Реализуем с помощью record</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">struct</span> Email
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> Regex Regex = <span style="color:#66d9ef">new</span> Regex(<span style="color:#e6db74">@&#34;^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$&#34;</span>, RegexOptions.Compiled);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Value { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Email(<span style="color:#66d9ef">string</span> <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ArgumentNullException.ThrowIfNull(<span style="color:#66d9ef">value</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> email = <span style="color:#66d9ef">value</span>.Trim();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> match = Regex.Match(email);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (!match.Success)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid email format&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Value = email;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Без record</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Email</span> : IEquatable&lt;Email&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> Regex Regex = <span style="color:#66d9ef">new</span> Regex(<span style="color:#e6db74">@&#34;^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$&#34;</span>, RegexOptions.Compiled);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Value { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Email(<span style="color:#66d9ef">string</span> <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ArgumentNullException.ThrowIfNull(<span style="color:#66d9ef">value</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> email = <span style="color:#66d9ef">value</span>.Trim();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> match = Regex.Match(email);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (!match.Success)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid email format&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Value = email;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">bool</span> Equals(Email other) =&gt; Value == other.Value;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">bool</span> Equals(<span style="color:#66d9ef">object?</span> obj) =&gt; obj <span style="color:#66d9ef">is</span> Email other &amp;&amp; Equals(other);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">int</span> GetHashCode() =&gt; Value.GetHashCode();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">string</span> ToString() =&gt; Value;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span> ==(Email left, Email right) =&gt; left.Equals(right);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span> !=(Email left, Email right) =&gt; !(left == right);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>При необходимости можно делать фабричный метод для создания VO и он может возвращать Result&lt;T&gt;, если хотите как-то обрабатывать эти ситуации, например, для отображения сообщения пользователю.</p>
<h1 id="datetime">DateTime</h1>
<p>DateTime является образцовым VO. Представь, если бы в стандартной библиотеке не было структуры DateTime. Нам пришлось бы постоянно <del>писать велосипед</del> работать с int, создавать несколько отдельных полей для удобства работы. Писать алгоритмы работы по преобразованию чисел в дату, добавлением минут, секунд и всему тому, что нам нужно повсеместно в этом типе. Это было бы ужасно.</p>
<p>К счастью разработчики стандартной библиотеки позаботились и нам доступен DateTime.</p>
<h1 id="персистентность">Персистентность</h1>
<p>Этот подход не будет проблемой при использовании его совместно с EF. Для этого существуют механизмы 
<a href="https://docs.microsoft.com/en-us/ef/core/modeling/value-conversions?tabs=data-annotations" target="_blank">Value conversions</a> и 
<a href="https://docs.microsoft.com/en-us/ef/core/modeling/owned-entities" target="_blank">Owned Types</a>.</p>
<h1 id="итог">Итог</h1>
<p>Не нужно боятся создавать новые типы, это поможет упростить код и сделать его более понятным.</p>
<p>К тому же мы получаем за бесплатно постоянно валидный объкт, что помогает избежать огромных пластов проверок и возможности привести его в неправильно состояние из произвольного места вашего кода.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://github.com/microsoft/referencesource/blob/master/mscorlib/system/datetime.cs" target="_blank">DateTime</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Value_object#:~:text=In%20computer%20science%2C%20a%20value,money%20or%20a%20date%20range." target="_blank">Value Object</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Primary_key" target="_blank">Primary key</a></li>
<li>
<a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%8D%D1%88" target="_blank">Кэш</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank">Domain Driven Design (DDD)</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects" target="_blank">Implement value objects(Microsoft)</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/ef/core/modeling/value-conversions?tabs=data-annotations" target="_blank">Value conversions</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/ef/core/modeling/owned-entities" target="_blank">Owned Types</a></li>
</ul>
]]></content></item><item><title>Хорошие подделки</title><link>https://blowin.github.io/portfolio/posts/2022/06/%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B8%D0%B5-%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D0%BB%D0%BA%D0%B8/</link><pubDate>Thu, 16 Jun 2022 11:10:07 +0400</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/06/%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B8%D0%B5-%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D0%BB%D0%BA%D0%B8/</guid><description>Отвратительней поддельных цветов может быть лишь поддельное оружие.
Вера Камша
Введение Мне часто приходится генерировать тестовые данные, либо для тестов, либо во время работы для заполнения базы данных. Такая работа является рутинной, к тому же тяжело руками сгенерировать правдоподобные и не повторяющиеся данные, которые были бы осмысленными.
Огромный пласт моих проблем ушел, когда я открыл для себя Bogus, это библиотека для генерирования правдоподобных фейковых данных, которые можно использовать в тестах, для инициализации базы данных или в любом другом месте, где нужны какие-то фейковые данные.</description><content type="html"><![CDATA[<blockquote>
<p>Отвратительней поддельных цветов может быть лишь поддельное оружие.</p>
<p><em>Вера Камша</em></p>
</blockquote>
<h1 id="введение">Введение</h1>
<p>Мне часто приходится генерировать тестовые данные, либо для тестов, либо во время работы для заполнения базы данных. Такая работа является рутинной, к тому же тяжело руками сгенерировать правдоподобные и не повторяющиеся данные, которые были бы осмысленными.</p>
<p>Огромный пласт моих проблем ушел, когда я открыл для себя 
<a href="https://github.com/bchavez/Bogus" target="_blank">Bogus</a>, это библиотека для генерирования правдоподобных фейковых данных, которые можно использовать в тестах, для инициализации базы данных или в любом другом месте, где нужны какие-то фейковые данные.</p>
<p>Она поддерживает несколько локализаций, что очень удобно если вы хотите сгенерировать данные на русском или ещё каком-то языке. Давайте рассмотрим как её можно использовать и что из этого выйдет. Сделаем краткий разбор API.</p>
<h1 id="рассмотрим-ближе">Рассмотрим ближе</h1>
<p>Будем использовать следующий тип, для генерации данных:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> Genre
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Action,
</span></span><span style="display:flex;"><span>    Classic,
</span></span><span style="display:flex;"><span>    ComicBook,
</span></span><span style="display:flex;"><span>    Detective
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">Book</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Guid Id { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Name { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; } = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Guid? AuthorId { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">bool</span> InStock { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Genre Genre { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">decimal</span> Price { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Для того, чтобы генерировать данные, существует класс Faker, он имеет generic версию, будем использовать именное её.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> authors = <span style="color:#66d9ef">new</span>[] { Guid.NewGuid(), Guid.NewGuid(), Guid.NewGuid(), };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> faker = <span style="color:#66d9ef">new</span> Faker&lt;Book&gt;(<span style="color:#e6db74">&#34;en&#34;</span>)
</span></span><span style="display:flex;"><span>    .UseSeed(<span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>    .RuleFor(book =&gt; book.Id, f =&gt; f.Random.Guid())
</span></span><span style="display:flex;"><span>    .RuleFor(book =&gt; book.Name, f =&gt; f.Random.Word())
</span></span><span style="display:flex;"><span>    .RuleFor(book =&gt; book.AuthorId, f =&gt; f.PickRandom(authors).OrNull(f))
</span></span><span style="display:flex;"><span>    .RuleFor(book =&gt; book.InStock, f =&gt; f.Random.Bool())
</span></span><span style="display:flex;"><span>    .RuleFor(book =&gt; book.Genre, f =&gt; f.PickRandom&lt;Genre&gt;())
</span></span><span style="display:flex;"><span>    .RuleFor(book =&gt; book.Price, f =&gt; f.Random.Decimal(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">150</span>))
</span></span><span style="display:flex;"><span>    .Rules((f, book) =&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Кастомная генерация данных</span>
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> books = faker.GenerateForever().Take(<span style="color:#ae81ff">10</span>).ToList();
</span></span></code></pre></div><p>Теперь давайте разбираться.</p>
<p>Конструктор может принимать локализацию, по умолчанию она = &ldquo;en&rdquo;, можно указать &ldquo;ru&rdquo; или одну из тех, что поддерживается.</p>
<p>Далее делаем вызов <strong>UseSeed(100)</strong>, там может быть любое число, если вам не нужно, чтобы при повторном вызове, возвращались те же данные, то можно пропустить этот вызов. Внутри себя объект создаёт Random и переданное число используется в качестве параметра конструктора, чтобы начать генерацию данных.</p>
<p>Сам API библиотеки очень наглядный. Есть 2 главных способа генерации данных для полей:</p>
<ul>
<li><strong>RuleFor</strong>: Генерация данных для конкретного свойства. В первой лямбде необходимо указать свойство, для которого будем генерировать тестовые данные, а вторым параметром мы можем передать значение, которое будет установлено или передать лямбду получающую Randomizer, который предоставляет методы по созданию данных.</li>
<li><strong>Rules</strong>: Кастомный код, для генерации данных, если к примеру есть какая-то зависимость у свойств, например (bool InActive, DateTime? InActiveDate)</li>
</ul>
<p>Если нам нужны какие-то связанные <strong>AuthorId</strong>, то мы можем получить уже существующих авторов, или взять данные из только что сгенерированных.</p>
<p>Метод <strong>OrNull</strong>, возвращает либо значение на котором был вызван, либо null. Это происходит с определенной вероятность, её можно изменить.</p>
<p>Faker может вернуть, как единственный экземляр объекта, так и бесконечную последовательность <strong>IEnumerable&lt;T&gt; GenerateForever()</strong>.</p>
<h1 id="итог">Итог</h1>
<p>Упрощайте жизнь себе и своим коллегам и используйте специализированные tools и библиотеки для генерации данных, чтобы упростить процесс разработки и тестирования.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://github.com/bchavez/Bogus" target="_blank">Bogus</a></li>
</ul>
]]></content></item><item><title>Слишком глубокий смысл</title><link>https://blowin.github.io/portfolio/posts/2022/06/%D1%81%D0%BB%D0%B8%D1%88%D0%BA%D0%BE%D0%BC-%D0%B3%D0%BB%D1%83%D0%B1%D0%BE%D0%BA%D0%B8%D0%B9-%D1%81%D0%BC%D1%8B%D1%81%D0%BB/</link><pubDate>Wed, 08 Jun 2022 17:52:47 +0400</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/06/%D1%81%D0%BB%D0%B8%D1%88%D0%BA%D0%BE%D0%BC-%D0%B3%D0%BB%D1%83%D0%B1%D0%BE%D0%BA%D0%B8%D0%B9-%D1%81%D0%BC%D1%8B%D1%81%D0%BB/</guid><description>Мужество — лучшее смертоносное оружие: мужество убивает даже сострадание. Сострадание же есть наиболее глубокая пропасть: ибо, насколько глубоко человек заглядывает в жизнь, настолько глубоко заглядывает он и в страдание.
Фридрих Вильгельм Ницше
Проблема Обращали ли вы внимание, как тяжело читать код с большой вложенностью? Думаю, что да. Такой код очень тяжел в понимании и поддержании из-за чего подвержен большему количеству ошибок. В этой статье рассмотрим способы решения данной проблемы и посмотрим как меняется код в лучшую сторону, при соблюдении простых правил.</description><content type="html"><![CDATA[<blockquote>
<p>Мужество — лучшее смертоносное оружие: мужество убивает даже сострадание. Сострадание же есть наиболее глубокая пропасть: ибо, насколько глубоко человек заглядывает в жизнь, настолько глубоко заглядывает он и в страдание.</p>
<p><em>Фридрих Вильгельм Ницше</em></p>
</blockquote>
<h1 id="проблема">Проблема</h1>
<p>Обращали ли вы внимание, как тяжело читать код с большой вложенностью? Думаю, что да. Такой код очень тяжел в понимании и поддержании из-за чего подвержен большему количеству ошибок. В этой статье рассмотрим способы решения данной проблемы и посмотрим как меняется код в лучшую сторону, при соблюдении простых правил.</p>
<p>Сегодня будем говорить о таком запахе кода, как &lsquo;Deeply Nested Code&rsquo;.</p>
<blockquote>
<p>Также хотелось бы напомнить, что у меня 
<a href="https://github.com/blowin/BlowinCleanCode" target="_blank">есть анализатор чистоты кода на базе Roslyn</a>, где есть анализ данной проблемы.</p>
</blockquote>
<h1 id="решения">Решения</h1>
<h2 id="инвертирование-условий">Инвертирование условий</h2>
<p>Давайте рассмотрим 2 куска кода и решим, какой из них более понятен.</p>
<h3 id="первоначальная-версия">Первоначальная версия</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SendAsPdf(Guid reportId, Guid userId, DateTime date)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> dataSource = LoadDataSource(reportId, userId, date);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (dataSource != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> report = CreateReport(dataSource);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (report != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            report.PrintDate = DateTime.Now;
</span></span><span style="display:flex;"><span>            report.AdditionalHeader = <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">byte</span>[] pdf = <span style="color:#ae81ff">_</span>reportGenerator.GeneratePdf(report);
</span></span><span style="display:flex;"><span>            SendPdf(pdf);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="новая-версия">Новая версия</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SendAsPdf(Guid reportId, Guid userId, DateTime date)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> dataSource = LoadDataSource(reportId, userId, date);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (dataSource == <span style="color:#66d9ef">null</span>) 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> report = CreateReport(dataSource);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (report == <span style="color:#66d9ef">null</span>) 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    report.PrintDate = DateTime.Now;
</span></span><span style="display:flex;"><span>    report.AdditionalHeader = <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">byte</span>[] pdf = <span style="color:#ae81ff">_</span>reportGenerator.GeneratePdf(report);
</span></span><span style="display:flex;"><span>    SendPdf(pdf);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="инкапсуляция">Инкапсуляция</h2>
<h3 id="первоначальная-версия-1">Первоначальная версия</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> RunProcess(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (!<span style="color:#ae81ff">_</span>service.HasUnhandledItem)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">_</span>service.TimeToRun)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>service.Run(args);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_l</span>ogger.LogInfo(<span style="color:#e6db74">&#34;Run process {Args} {Time}&#34;</span>, args, DateTime.UtcNow);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="новая-версия-1">Новая версия</h3>
<p>Правильнее было бы объединить два свойства <em>HasUnhandledItem</em> и <em>TimeToRun</em> в одно правильно названное и использовать его.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> RunProcess(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">_</span>service.Ready)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>service.Run(args);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ogger.LogInfo(<span style="color:#e6db74">&#34;Run process {Args} {Time}&#34;</span>, args, DateTime.UtcNow);    
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="применяем-инверсию-условий">Применяем инверсию условий</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> RunProcess(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (!<span style="color:#ae81ff">_</span>service.Ready) 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>service.Run(args);
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_l</span>ogger.LogInfo(<span style="color:#e6db74">&#34;Run process {Args} {Time}&#34;</span>, args, DateTime.UtcNow);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="нет-доступа-к-сорцам">Нет доступа к сорцам</h3>
<p>Мы часто используем библиотечный код, который не можем изменить. Что делать в таком случае? Используем extension.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Класс с extension методом</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> Ready(<span style="color:#66d9ef">this</span> ProcessService self) =&gt; !<span style="color:#ae81ff">_</span>service.HasUnhandledItem &amp;&amp; <span style="color:#ae81ff">_</span>service.TimeToRun;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Использование</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> RunProcess(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (!<span style="color:#ae81ff">_</span>service.Ready()) 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>service.Run(args);
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_l</span>ogger.LogInfo(<span style="color:#e6db74">&#34;Run process {Args} {Time}&#34;</span>, args, DateTime.UtcNow);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="выделение-в-метод">Выделение в метод</h2>
<p>Часто приходится видеть огромный try catch, в котором написано много кода. Что не так с этим подходом, кроме того, что с каждым вложенным элементов усложняется когнитивная сложность? Например, такой код тяжелее понимать, потому что разработчик начинает исполнять его глазами и в каждом месте, где потенциально может произойти ошибка, прыгать в catch блоки и искать обработчик.</p>
<h3 id="первоначальная-версия-2">Первоначальная версия</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(IEnumerable&lt;Document&gt; documents, DocumentStatus newStatus)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> document <span style="color:#66d9ef">in</span> documents)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> detail = LoadDetail(document);
</span></span><span style="display:flex;"><span>            UpdateStatus(document, detail, newStatus);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (ArgumentException e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Сложная обработка</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Сложная обработка</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="новая-версия-2">Новая версия</h3>
<p>Выделим логику из try в отдельный метод.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(IEnumerable&lt;Document&gt; documents, DocumentStatus newStatus)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        UpdateStatusCore(documents, newStatus);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (ArgumentException e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Сложная обработка</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Сложная обработка</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> UpdateStatusCore(IEnumerable&lt;Document&gt; documents, DocumentStatus newStatus)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> document <span style="color:#66d9ef">in</span> documents)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> detail = LoadDetail(document);
</span></span><span style="display:flex;"><span>        UpdateStatus(document, detail, newStatus);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Кода стало больше, но этот код кудо удобнее поддерживать и он более интуитивен, чем первый вариант. В таком случае мы пишем код, будто тут нет никаких исключений, а реальную логику обработки выполняют на уровень выше. Обратите внимание, что новый метод private и его можно вызвать только внутри данного класса. Можно воспользовать 
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions" target="_blank">локальными функциями</a>, для того, чтобы только один метод мог использовать данную логику.</p>
<h3 id="local-function">Local function</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(IEnumerable&lt;Document&gt; documents, DocumentStatus newStatus)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        UpdateStatusCore(documents, newStatus);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (ArgumentException e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Сложная обработка</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Сложная обработка</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> UpdateStatusCore(IEnumerable&lt;Document&gt; allDocuments, DocumentStatus statusForUpdate)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> document <span style="color:#66d9ef">in</span> allDocuments)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> detail = LoadDetail(document);
</span></span><span style="display:flex;"><span>            UpdateStatus(document, detail, statusForUpdate);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Можно сделать UpdateStatusCore без параметров, но по-моему мнению это будет только больше путать разработчика, поэтому мы передаём каждый параметр явно, но всё зависит от конкретной ситуации.</p>
<h2 id="императивность">Императивность</h2>
<p>Ежедневно мы используем циклы и пишем императивный код, но лучшей заменой такого подходя является декларативность. С её помощью мы избегаем большую вложенность и просто описываем цепочку действий. Хорошим примером является 
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/" target="_blank">linq</a>.</p>
<h3 id="первоначальная-версия-3">Первоначальная версия</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> IEnumerable&lt;Document&gt; FindDocumentsWithStatuses(IEnumerable&lt;Document&gt; documents, DocumentStatus searchStatus)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> document <span style="color:#66d9ef">in</span> documents)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (document.Status == searchStatus)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> document;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="новая-версия-3">Новая версия</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> IEnumerable&lt;Document&gt; FindDocumentsWithStatuses(IEnumerable&lt;Document&gt; documents, DocumentStatus searchStatus)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> documents.Where(document =&gt; document.Status == searchStatus);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="обновляем-updatestatuscore">Обновляем UpdateStatusCore</h3>
<p>Доработаем UpdateStatusCore из прошлого примера.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> UpdateStatusCore(IEnumerable&lt;Document&gt; allDocuments, DocumentStatus statusForUpdate)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    allDocuments.ForEach(doc =&gt; UpdateStatus(doc, LoadDetail(doc), statusForUpdate));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Или используем Select</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> UpdateStatusCore(IEnumerable&lt;Document&gt; allDocuments, DocumentStatus statusForUpdate)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    allDocuments
</span></span><span style="display:flex;"><span>        .Select(doc =&gt; (Document: doc, Detail: LoadDetail(doc)))
</span></span><span style="display:flex;"><span>        .ForEach(x =&gt; UpdateStatus(x.Document, x.Detail, statusForUpdate));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="итог">Итог</h1>
<p>В данной статье рассмотрели несколько простых способов, как можно улучшить понимаемость и поддреживаемость кода.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://github.com/blowin/BlowinCleanCode" target="_blank">BlowinCleanCode</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Code_smell" target="_blank">Code Smell</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions" target="_blank">Local functions</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/" target="_blank">Linq</a></li>
<li>
<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%BB%D0%B0%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" target="_blank">Декларативное программирование</a></li>
<li>
<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BC%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" target="_blank">Императивное программирование</a></li>
</ul>
]]></content></item><item><title>Electron + Blazor = ♥</title><link>https://blowin.github.io/portfolio/posts/2022/05/electron--blazor/</link><pubDate>Fri, 20 May 2022 17:15:40 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/electron--blazor/</guid><description>Опишу, как можно собрать blazor проект с использованием electron. Это можно использовать, для любого ASP проекта.
Шаги Устанавливаем electronNet.cli (один раз) dotnet tool install --global electronNet.cli Установить nuget пакет ElectronNET.API Добавить в Startup создание окна if (HybridSupport.IsElectronActive) { Task.Run(async () =&amp;gt; { await Electron.WindowManager.CreateBrowserViewAsync(); await Electron.WindowManager.CreateWindowAsync(new BrowserWindowOptions { MinWidth = 700, MinHeight = 500, Center = true }); }); } Добавить UseElectron в Program.</description><content type="html"><![CDATA[<p>Опишу, как можно собрать blazor проект с использованием electron. Это можно использовать, для любого ASP проекта.</p>
<h1 id="шаги">Шаги</h1>
<ol>
<li>Устанавливаем electronNet.cli (один раз)</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>dotnet tool install --global electronNet.cli
</span></span></code></pre></div><ol start="2">
<li>Установить nuget пакет 
<a href="https://www.nuget.org/packages/ElectronNET.API/" target="_blank">ElectronNET.API</a></li>
<li>Добавить в Startup создание окна</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (HybridSupport.IsElectronActive)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	Task.Run(<span style="color:#66d9ef">async</span> () =&gt;
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">await</span> Electron.WindowManager.CreateBrowserViewAsync();
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">await</span> Electron.WindowManager.CreateWindowAsync(<span style="color:#66d9ef">new</span> BrowserWindowOptions
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			MinWidth = <span style="color:#ae81ff">700</span>,
</span></span><span style="display:flex;"><span>			MinHeight = <span style="color:#ae81ff">500</span>,
</span></span><span style="display:flex;"><span>			Center = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>		});
</span></span><span style="display:flex;"><span>	});   
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ol start="4">
<li>Добавить UseElectron в Program.cs</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>webBuilder.UseElectron(args).UseStartup&lt;Startup&gt;()
</span></span></code></pre></div><h1 id="сборка">Сборка</h1>
<p>Переходим в папку с веб приложением (csproj) и запускаем</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>electronize <span style="color:#66d9ef">init</span>
</span></span></code></pre></div><p>или</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>electronize build /target win
</span></span></code></pre></div><p>Подробнее можно прочитать 
<a href="https://github.com/ElectronNET/Electron.NET/#-build" target="_blank">тут</a></p>
<h1 id="запуск-приложения">Запуск приложения</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>electronize start
</span></span></code></pre></div><h1 id="ссылки">Ссылки</h1>
<hr>
<ul>
<li>
<a href="https://www.nuget.org/packages/ElectronNET.API/" target="_blank">ElectronNET.API (Nuget)</a></li>
</ul>
]]></content></item><item><title>Примитивизм</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D0%B8%D0%B7%D0%BC/</link><pubDate>Thu, 12 May 2022 20:21:29 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D0%B8%D0%B7%D0%BC/</guid><description>На протяжении всего своего пути в программировании я сталкиваюсь с проблемой повсеместного использования примитивных типов, они повсюду.
Хотя мы и имитируем реальный мир, но мы раз за разом используем примитивные типы, для всего многообразия понятий, которые мы моделируем в коде. Эти понятия имеют больше ограничений, чем тип, который мы используем. Чтобы решить эту проблему, существует такое понятие как Value Object, оно отображает конкретное понятие с инкапсулированной логикой.
Что не так с примитивами?</description><content type="html"><![CDATA[<p>На протяжении всего своего пути в программировании я сталкиваюсь с проблемой повсеместного использования примитивных типов, они повсюду.</p>
<p>Хотя мы и имитируем реальный мир, но мы раз за разом используем примитивные типы, для всего многообразия понятий, которые мы моделируем в коде. Эти понятия имеют больше ограничений, чем тип, который мы используем. Чтобы решить эту проблему, существует такое понятие как 
<a href="https://en.wikipedia.org/wiki/Value_object" target="_blank">Value Object</a>, оно отображает конкретное понятие с инкапсулированной логикой.</p>
<h1 id="что-не-так-с-примитивами">Что не так с примитивами?</h1>
<p>Для примера возьмём банковский номер. Для его моделирования скорее всего мы будем использовать строку, хотя у нас есть определенные правила того, как он должен выглядеть. Например, формат номера должен иметь следующий вид: &ldquo;123456789 1234567891 1234&rdquo;.</p>
<p>То есть, он состоит из 3-х частей, разделенными пробелами, каждая из которых содержит только определенное количество цифр. Да, в реальности правил будет куда больше, но давайте для простоты оставим так.</p>
<p><img src="primitivism-image-20220512153950414.png" alt="Example"></p>
<p>Получается, что наш Bank Number является частью String, но он является только определенным подмножеством строки.</p>
<p>В чём могут быть проблемы, при использовании строки в качестве банковского номера?</p>
<ul>
<li>Строка может бесконечно разной, иметь любую длину, быть null, иметь любые символы в любой последовательности.</li>
<li>Везде, где нам будут передавать строку в качестве номера, нам придётся валидировать, так как мы не можем знать точно, является ли эта строка валидной.</li>
<li>Нужно дублировать логику обработки нашего номера.</li>
<li>Скорее всего мы захотим удалить пробелы в начале и в конце строки и если после этого удаления, строка будет содержать корректный номер, то мы хотим с ним работать.</li>
<li>Мы не можем связать логику работы номера со строкой.</li>
</ul>
<h1 id="пример">Пример</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">decimal</span> <span style="color:#ae81ff">_</span>balance;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">string</span> <span style="color:#ae81ff">_</span>number;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> BankAccount(<span style="color:#66d9ef">decimal</span> balance, <span style="color:#66d9ef">string</span> number)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">_</span>balance &lt; <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Balance cannot be negative&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_</span>number))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Number cannot be empty&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(!IsValidNumber(number))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Number is not valid&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>balance = balance;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>number = number;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Transfer(BankAccount destination, <span style="color:#66d9ef">decimal</span> amount)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (destination == <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentNullException(nameof(destination));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (amount &lt; <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Amount cannot be negative&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">_</span>balance &lt; amount)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;From account does not have enough money&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>balance -= amount;
</span></span><span style="display:flex;"><span>        destination.<span style="color:#ae81ff">_</span>balance += amount;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> IsValidNumber(<span style="color:#66d9ef">string</span> number)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> parts = number.Split(<span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> partMaxLength = <span style="color:#66d9ef">new</span>[] { <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">4</span> };
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(parts.Length != partMaxLength.Length)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (partMaxLength.Where((t, i) =&gt; parts[i].Length != t).Any())
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> parts.SelectMany(e =&gt; e).All(<span style="color:#66d9ef">char</span>.IsDigit);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>BankAccount содержит 2 поля. Обратите внимание на метод Transfer, так как у нас нет понятия деньги, то нам приходится везде дублировать логику проверки, что они не являются отрицательными, такой логики может быть куда больше и мы можем забыть её реализовать.</p>
<p>У нас может возникнуть необходимость создавать транзакции в типе и писать в неё номер счёта. Да, при создании транзакции из BankAccount, мы знаем, что там корректный номер, но скорее всего будут и другие места их создания и мы вряд ли хотели бы хранить ошибочные номера счетов. Тогда мы захотим продублировать эту логику в конструкторе или сделать статический метод &lsquo;Helper&rsquo;.</p>
<h1 id="используем-value-object">Используем Value Object</h1>
<p>Будем использовать 
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/record-structs" target="_blank">Record struct</a>, для реализации Value Object.</p>
<h2 id="важно">Важно</h2>
<p>Чтобы разные инстансы Value Object вели себя как обычные примитивы. То есть, они должны быть равны в случае равенства всех полей, реализовывать <strong>GetHashCode</strong>, чтобы их можно было совместно использовать с коллекциями. Правильно будет вместе с <strong>Equals</strong> перегрузить операторы сравнения.</p>
<p>При использовании <strong>record</strong>, всё необходимое уже реализовано. Если же мы будем использовать простой класс или структуру, это необходимо сделать самостоятельно.</p>
<h2 id="реализуем-money-и-bankaccountnumber">Реализуем Money и BankAccountNumber</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">struct</span> Money
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">decimal</span> Amount { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Money(<span style="color:#66d9ef">decimal</span> amount)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (amount &lt; <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Amount cannot be negative&#34;</span>);
</span></span><span style="display:flex;"><span>        Amount = amount;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span>&lt;(Money left, Money right) =&gt; left.Amount &lt; right.Amount;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span>&lt;=(Money left, Money right) =&gt; left.Amount &lt;= right.Amount;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span>&gt;(Money left, Money right) =&gt; left.Amount &gt; right.Amount;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span>&gt;=(Money left, Money right) =&gt; left.Amount &gt;= right.Amount;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Money <span style="color:#66d9ef">operator</span>-(Money left, Money right) =&gt; <span style="color:#66d9ef">new</span> Money(left.Amount - right.Amount);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Money <span style="color:#66d9ef">operator</span>+(Money left, Money right) =&gt; <span style="color:#66d9ef">new</span> Money(left.Amount + right.Amount);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">struct</span> BankAccountNumber
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Number { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> BankAccountNumber(<span style="color:#66d9ef">string</span> number)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#66d9ef">string</span>.IsNullOrWhiteSpace(number))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Number cannot be empty&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> trimNumber = number.Trim();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(!IsValidNumber(trimNumber))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Number is not valid&#34;</span>);
</span></span><span style="display:flex;"><span>        Number = trimNumber;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> IsValidNumber(<span style="color:#66d9ef">string</span> number)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> parts = number.Split(<span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> partMaxLength = <span style="color:#66d9ef">new</span>[] { <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">4</span> };
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(parts.Length != partMaxLength.Length)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (partMaxLength.Where((t, i) =&gt; parts[i].Length != t).Any())
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> parts.SelectMany(e =&gt; e).All(<span style="color:#66d9ef">char</span>.IsDigit);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>BankAccountNumber нормализует входящую строку и приводит её к нормальному виду, удаляя пробелы. Для Money мы добавили математические операции, чтобы он вёл себя как простое число. Благодаря тому, что это отдельные типы, легко можно добавлять логику.</p>
<p>Теперь BankAccount будет выглядеть следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Money <span style="color:#ae81ff">_</span>balance;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> BankAccountNumber <span style="color:#ae81ff">_</span>number;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> BankAccount(Money balance, BankAccountNumber number)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>balance = balance;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>number = number;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Transfer(BankAccount destination, Money amount)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (destination == <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentNullException(nameof(destination));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">_</span>balance &lt; amount)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;From account does not have enough money&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>balance -= amount;
</span></span><span style="display:flex;"><span>        destination.<span style="color:#ae81ff">_</span>balance += amount;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Теперь конструктор делает простые присваивания полей и не содержит проверок.</p>
<h1 id="информативность-ошибок">Информативность ошибок</h1>
<p>Чтобы не бросать исключения из конструктора и сделать их понятными для пользователей и разработчиков, стоит использовать фабричные методы. Давайте изменим BankAccountNumber с использованием этого подхода и 
<a href="https://adambennett.dev/2020/05/the-result-monad/" target="_blank">Result</a> из 
<a href="https://www.nuget.org/packages/CSharpFunctionalExtensions/" target="_blank">CSharpFunctionalExtensions</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">struct</span> BankAccountNumber
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Number { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> BankAccountNumber(<span style="color:#66d9ef">string</span> number) =&gt; Number = number;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Result&lt;BankAccountNumber&gt; TryCreate(<span style="color:#66d9ef">string</span> number)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#66d9ef">string</span>.IsNullOrWhiteSpace(number))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Result.Failure&lt;BankAccountNumber&gt;(<span style="color:#e6db74">&#34;Number cannot be empty&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> parts = number.Trim().Split(<span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> partMaxLength = <span style="color:#66d9ef">new</span>[] { <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">4</span> };
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(parts.Length != partMaxLength.Length)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Result.Failure&lt;BankAccountNumber&gt;(<span style="color:#e6db74">&#34;Number should contain 3 parts&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (partMaxLength.Where((t, i) =&gt; parts[i].Length != t).Any())
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Result.Failure&lt;BankAccountNumber&gt;(<span style="color:#e6db74">&#34;Number parts should have 9, 10, 4 digits&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(!parts.SelectMany(e =&gt; e).All(<span style="color:#66d9ef">char</span>.IsDigit))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Result.Failure&lt;BankAccountNumber&gt;(<span style="color:#e6db74">&#34;Number should contain only digits&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> validNumber = <span style="color:#66d9ef">string</span>.Join(<span style="color:#e6db74">&#34; &#34;</span>, parts);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Result.Success(<span style="color:#66d9ef">new</span> BankAccountNumber(validNumber));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Теперь создать наш BankAccountNumber можно только используя метод <strong>Result<!-- raw HTML omitted --> TryCreate(string number)</strong>. Который делает все необходимые проверки и возвращает ошибку, если на каком-то из шагов что-то пошло не так, не выбрасывая исключение.</p>
<p>Этот подход прекрасно работает c EF. Конфигурация может выглядеть следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Делаем публичным свойством</span>
</span></span><span style="display:flex;"><span>modelBuilder.Entity&lt;BankAccount&gt;()
</span></span><span style="display:flex;"><span>            .Property(e =&gt; e.Number)
</span></span><span style="display:flex;"><span>            .HasConversion(number =&gt; number.Number, numberAsStr =&gt; BankAccountNumber.TryCreate(numberAsStr).Value);
</span></span></code></pre></div><h1 id="итог">Итог</h1>
<p>Не стоит боятся добавлять новые типы, часто это принесет куда больше пользы в будущем, чем использование примитивов.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/record-structs" target="_blank">Record struct</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Value_object" target="_blank">Value Object</a></li>
<li>
<a href="https://adambennett.dev/2020/05/the-result-monad/" target="_blank">Result</a></li>
<li>
<a href="https://www.nuget.org/packages/CSharpFunctionalExtensions/" target="_blank">CSharpFunctionalExtensions</a></li>
</ul>
]]></content></item><item><title>Конструируй правильно</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%B8%D1%80%D1%83%D0%B9-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE/</link><pubDate>Wed, 11 May 2022 17:29:30 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%B8%D1%80%D1%83%D0%B9-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE/</guid><description>Конструктор - это точка входа в любой объект. Это метод, который служит инициализатором вашего типа, проверяет инварианты, переводит объект в состояние пригодное для использования.
Каждый день мы пишем свои типы, они в дальнейшем будут использовать и наши коллеги. Но сталкивались ли вы с тем, что после создания объекта вы получали ошибки связанные с тем, что после создания объекта какие-то из полей не были проинициализированы? Если не встречали, то вам очень повезло, к сожалению, я не из таких людей.</description><content type="html"><![CDATA[<p>Конструктор - это точка входа в любой объект. Это метод, который служит инициализатором вашего типа, проверяет инварианты, переводит объект в состояние пригодное для использования.</p>
<p>Каждый день мы пишем свои типы, они в дальнейшем будут использовать и наши коллеги. Но сталкивались ли вы с тем, что после создания объекта вы получали ошибки связанные с тем, что после создания объекта какие-то из полей не были проинициализированы? Если не встречали, то вам очень повезло, к сожалению, я не из таких людей.</p>
<p>Так почему же возникают такие проблемы, если конструктор является такой же важной частью типа, как и его методы, которым нужно уделять не меньшее внимания?</p>
<p>Давайте разбираться, для этого будем использовать такой тип:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Tree</span>&lt;T&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node? <span style="color:#ae81ff">_</span>root;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> IEqualityComparer&lt;T&gt; <span style="color:#ae81ff">_</span>comparer;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Tree(IEnumerable&lt;T&gt; items)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Tree(IEnumerable&lt;T&gt; items, IEqualityComparer&lt;T&gt; comparer)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Tree(IEqualityComparer&lt;T&gt; comparer)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> AddRange(IEnumerable&lt;T&gt; items)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Node</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="распространенная-реализация">Распространенная реализация</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Tree(IEnumerable&lt;T&gt; items)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">_</span>comparer = EqualityComparer&lt;T&gt;.comparer;
</span></span><span style="display:flex;"><span>  AddRange(items);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Tree(IEnumerable&lt;T&gt; items, IEqualityComparer&lt;T&gt; comparer)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>comparer = comparer;
</span></span><span style="display:flex;"><span>  AddRange(items);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Tree(IEqualityComparer&lt;T&gt; comparer)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>comparer = comparer ?? <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentNullException(nameof(comparer));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>В примере выше есть ошибка, заметили ли вы её?</p>
<p>Давайте изучим код ещё раз, подумаем и БИНГО! В конструкторе 2, мы забыли сделать проверку на null. Получается, что при вызове этого конструктора и передаче туда null для <strong>comparer</strong>, нормальной ошибки от класса мы не получим и упадём в <strong>AddRange</strong>.</p>
<h2 id="минусы">Минусы</h2>
<ul>
<li>В каждом конструкторе мы дублируем логику инициализации.</li>
<li>Неинициализированные поля.</li>
<li>Поменяли логику в одном конструкторе и оставили остальные без изменений.</li>
<li>Разбухание кода, что влечет к его усложнению и затруднению в поддержке.</li>
</ul>
<h1 id="первичный-конструктор">Первичный конструктор</h1>
<p>В типе всегда должен быть главный конструктор и остальные конструкторы в конечном счете всегда должны вызывать именно его. Тогда у нас будет единая точка, для инициализации типа, что помогает решить огромный пласт ошибок.</p>
<p>Давайте исправим наш пример:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Tree(IEnumerable&lt;T&gt; items)
</span></span><span style="display:flex;"><span>        : <span style="color:#66d9ef">this</span>(items, EqualityComparer&lt;T&gt;.Default)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Tree(IEnumerable&lt;T&gt; items, IEqualityComparer&lt;T&gt; comparer)
</span></span><span style="display:flex;"><span>    : <span style="color:#66d9ef">this</span>(comparer)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    AddRange(items);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Tree(IEqualityComparer&lt;T&gt; comparer)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>comparer = comparer ?? <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentNullException(nameof(comparer));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>У нас есть главный конструктор <strong>Tree(IEqualityComparer<!-- raw HTML omitted --> comparer)</strong>, который вызывают все остальные в конечном счете.</p>
<p>Мы знаем, что нашему типу обязательно нужен <strong>IEqualityComparer<!-- raw HTML omitted --></strong>, давайте его требовать в главном конструкторе. Там мы можем добавить проверку на null и мы точно будем знать, что там есть все нужные проверки.</p>
<p>Обратите внимание, что конструктор 1, вызывает конструктор 2, который в конечном счете вызывает главный конструктор (номер 3).</p>
<h1 id="а-что-сейчас">А что сейчас?</h1>
<p>С появлением 
<a href="https://kotlinlang.org/docs/classes.html#constructors" target="_blank">record</a>. Данную идею включили в язык, чему я безумно рад. Но не каждый может использовать необходимую версию языка и не всегда нужно использовать record, для его компилятор требует вызова primary constructor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">StreamAsString</span>(Stream Stream)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// без this(File.OpenRead(path)), не компилируется</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> StreamAsString(<span style="color:#66d9ef">string</span> path) : <span style="color:#66d9ef">this</span>(File.OpenRead(path))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Content
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">get</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">using</span> var reader = <span style="color:#66d9ef">new</span> StreamReader(Stream);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> reader.ReadToEnd();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="итог">Итог</h1>
<p>Переиспользуя готовые конструкторы, мы перекладываем ответственность проверки на них и не будем задумываться о том, какие поля нам нужно инициализировать или как это правильно сделать.</p>
<p>В конечном счете это кто-то должен будет реализовать, но это будет единая точка, что очень упрощает понимание и поддержание такого кода.</p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/records" target="_blank">Record (C#)</a></li>
<li>
<a href="https://kotlinlang.org/docs/classes.html#constructors" target="_blank">Primary constructor на уровне языка (Kotlin)</a></li>
</ul>
]]></content></item><item><title>Анатомия декоратора</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</link><pubDate>Thu, 05 May 2022 20:30:50 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%B0%D0%BD%D0%B0%D1%82%D0%BE%D0%BC%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0/</guid><description>Как известно, декоратор является одним из структурных паттернов проектирования. Его удобно комбинировать с другими паттернами для достижения гибкой и расширяемой системы, без изменения существующего кода.
Разбираемся на примере логирования Допустим, перед нами появилась задача написать логирование для нашего приложения. Что же, давайте реализуем:
public enum LogLevel { Debug, Info, Warn, Error, Fatal } public interface ILogger : IDisposable { void Log(LogLevel level, string message, params object[] args); } public class ConsoleLogger : ILogger { public void Log(LogLevel level, string message, params object[] args) { Console.</description><content type="html"><![CDATA[<p>Как известно, декоратор является одним из структурных паттернов проектирования. Его удобно комбинировать с другими паттернами для достижения гибкой и расширяемой системы, без изменения существующего кода.</p>
<h2 id="разбираемся-на-примере-логирования">Разбираемся на примере логирования</h2>
<p>Допустим, перед нами появилась задача написать логирование для нашего приложения. Что же, давайте реализуем:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> LogLevel
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Debug,
</span></span><span style="display:flex;"><span>    Info,
</span></span><span style="display:flex;"><span>    Warn,
</span></span><span style="display:flex;"><span>    Error,
</span></span><span style="display:flex;"><span>    Fatal
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">ILogger</span> : IDisposable
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> Log(LogLevel level, <span style="color:#66d9ef">string</span> message, <span style="color:#66d9ef">params</span> <span style="color:#66d9ef">object</span>[] args);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConsoleLogger</span> : ILogger
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Log(LogLevel level, <span style="color:#66d9ef">string</span> message, <span style="color:#66d9ef">params</span> <span style="color:#66d9ef">object</span>[] args)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Console.Write(<span style="color:#e6db74">&#34;[{0}]: &#34;</span>, level);
</span></span><span style="display:flex;"><span>        Console.WriteLine(message, args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose(){}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Что делать, если нам необходимо выключить логирование на определенных уровнях?</p>
<p>Первое, что может прийти в голову:</p>
<blockquote>
<ul>
<li>Добавить поле в ConsoleLogger и перед записью проверять, нужно ли логировать сообщение.</li>
<li>Сделать базовый класс, который будет делать эту проверку (лучше, но не так гибко, теперь нам обязательно нужно наследоваться от базового класса).</li>
</ul>
</blockquote>
<p>Эти решения будут работать, но вряд ли будут удобны в дальнейшей перспективе.</p>
<h2 id="используем-декоратор">Используем декоратор</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FilterLogLevelLogger</span> : ILogger
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ILogger <span style="color:#ae81ff">_l</span>ogger;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> LogLevel <span style="color:#ae81ff">_</span>minimumLogLevel;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> FilterLogLevelLogger(ILogger logger, LogLevel minimumLogLevel)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ogger = logger;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>minimumLogLevel = minimumLogLevel;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Log(LogLevel level, <span style="color:#66d9ef">string</span> message, <span style="color:#66d9ef">params</span> <span style="color:#66d9ef">object</span>[] args)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (level &lt; <span style="color:#ae81ff">_</span>minimumLogLevel)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ogger.Log(level, message, args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() =&gt; <span style="color:#ae81ff">_l</span>ogger.Dispose();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Комбинируем:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> var consoleLogger = <span style="color:#66d9ef">new</span> FilterLogLevelLogger(<span style="color:#66d9ef">new</span> ConsoleLogger(), LogLevel.Info);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Debug, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Warn, <span style="color:#e6db74">&#34;Test&#34;</span>); <span style="color:#75715e">// выводит только это сообщение</span>
</span></span></code></pre></div><h1 id="composite--decorator">Composite + Decorator</h1>
<p>Наше приложение усложняется и теперь нам мало простой записи в консоль, у нас появилась необходимость писать логи в файл.</p>
<p>Это сделать просто:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FileLogger</span> : ILogger
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> StreamWriter <span style="color:#ae81ff">_</span>writer;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> FileLogger(<span style="color:#66d9ef">string</span> path) =&gt; <span style="color:#ae81ff">_</span>writer = File.AppendText(path);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Log(LogLevel level, <span style="color:#66d9ef">string</span> message, <span style="color:#66d9ef">params</span> <span style="color:#66d9ef">object</span>[] args)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>writer.Write(<span style="color:#e6db74">&#34;[{0}]: &#34;</span>, level);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>writer.WriteLine(message, args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() =&gt; <span style="color:#ae81ff">_</span>writer.Dispose();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>А что если мы хотим логировать и в файл, и в консоль?</p>
<h2 id="используем-композит">Используем композит</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CompositeLogger</span> : ILogger
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ICollection&lt;ILogger&gt; <span style="color:#ae81ff">_l</span>oggers;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> CompositeLogger(ICollection&lt;ILogger&gt; loggers) =&gt; <span style="color:#ae81ff">_l</span>oggers = loggers;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Log(LogLevel level, <span style="color:#66d9ef">string</span> message, <span style="color:#66d9ef">params</span> <span style="color:#66d9ef">object</span>[] args)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> logger <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">_l</span>oggers)
</span></span><span style="display:flex;"><span>            logger.Log(level, message, args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> logger <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">_l</span>oggers)
</span></span><span style="display:flex;"><span>            logger.Dispose();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Теперь мы можем использовать 2 логгера одновременно:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> loggers = <span style="color:#66d9ef">new</span> ILogger[]
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> FileLogger(<span style="color:#e6db74">&#34;test.txt&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> ConsoleLogger()
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> var consoleLogger = <span style="color:#66d9ef">new</span> CompositeLogger(loggers);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Debug, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Warn, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span></code></pre></div><p>Благодаря использованию Composite мы также можем включить определенный уровень логирования для конкретного логгера или же для всех одновременно.</p>
<h2 id="определенный-уровень-для-всех-логгеров-одновременно">Определенный уровень для всех логгеров одновременно</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> loggers = <span style="color:#66d9ef">new</span> ILogger[]
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> FileLogger(<span style="color:#e6db74">&#34;test.txt&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> ConsoleLogger()
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#75715e">//                            Магия тут ↓</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> var consoleLogger = <span style="color:#66d9ef">new</span> FilterLogLevelLogger(<span style="color:#66d9ef">new</span> CompositeLogger(loggers), LogLevel.Info);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Info, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Warn, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span></code></pre></div><p>Как это работает:</p>
<p>Вызываем Log, с определенным уровнем логирования у FilterLogLevelLogger, который уже начинает проверку на уровень логирования и если он должен быть залогирован, то он попадает ниже, в нашем случае, это ComposeLogger, который вызовет Log, на каждом из внутренних логгеров ConsoleLogger и FileLogger.</p>
<p>В текущем примере на консоль и в файл попадёт 2 сообщения. Так как они все подходят по уровню логирования.</p>
<h2 id="определенный-уровень-логирования-для-каждого-логгера-отдельно">Определенный уровень логирования для каждого логгера отдельно</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> loggers = <span style="color:#66d9ef">new</span> ILogger[]
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Магия тут ↓</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> FilterLogLevelLogger(<span style="color:#66d9ef">new</span> FileLogger(<span style="color:#e6db74">&#34;test.txt&#34;</span>), LogLevel.Warn),
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Магия тут ↓</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> FilterLogLevelLogger(<span style="color:#66d9ef">new</span> ConsoleLogger(), LogLevel.Info)
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> var consoleLogger = <span style="color:#66d9ef">new</span> CompositeLogger(loggers);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Info, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Warn, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span></code></pre></div><p>Как это работает:</p>
<p>Вызываем Log, с определенным уровнем логирования, на ComposeLogger, он в свою очередь берет каждый из внутренних логгеров и перенаправляет запрос к каждому из внутренних:</p>
<ul>
<li>new FilterLogLevelLogger(new FileLogger(&ldquo;test.txt&rdquo;), LogLevel.Warn)</li>
<li>new FilterLogLevelLogger(new ConsoleLogger(), LogLevel.Info)</li>
</ul>
<p>Который уже начинает проверку на уровень логирования и если он должен быть залогирован, то он попадает ниже, т.е уже к конкретной реализации ConsoleLogger или FileLogger.</p>
<p>В текущем примере на консоль попадёт 2 сообщения, так как они подходят по уровню, а в файл будет записано только одно сообщение, с уровнем Warn.</p>
<h1 id="proxy--decorator">Proxy + Decorator</h1>
<p>Представим, появилось требование, что мы не должны открывать файл логирования на старте приложения. Допустим, что это занимает много ресурсов и нам нужно отложить это действие, настолько, насколько это возможно.</p>
<h2 id="сделаем-новый-декоратор">Сделаем новый декоратор</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LazyLogger</span> : ILogger
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Lazy&lt;ILogger&gt; <span style="color:#ae81ff">_l</span>azyLogger;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> LazyLogger(Func&lt;ILogger&gt; loggerFactory) =&gt; <span style="color:#ae81ff">_l</span>azyLogger = <span style="color:#66d9ef">new</span> Lazy&lt;ILogger&gt;(loggerFactory);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Log(LogLevel level, <span style="color:#66d9ef">string</span> message, <span style="color:#66d9ef">params</span> <span style="color:#66d9ef">object</span>[] args)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>azyLogger.Value.Log(level, message, args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">_l</span>azyLogger.IsValueCreated)
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_l</span>azyLogger.Value.Dispose();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Использование:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> var lazyLogger = <span style="color:#66d9ef">new</span> LazyLogger(() =&gt; <span style="color:#66d9ef">new</span> FileLogger(<span style="color:#e6db74">&#34;test.txt&#34;</span>)); 
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Warn, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span></code></pre></div><p>Теперь, если логгер не будет нужен, то файл не будет открыт/создан во время работы приложения и это произойдёт только по необходимости</p>
<h1 id="proxy--composite--decorator">Proxy + Composite + Decorator</h1>
<p>Используем всё вместе:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> loggers = <span style="color:#66d9ef">new</span> ILogger[]
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> FilterLogLevelLogger(
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">new</span> LazyLogger(() =&gt; <span style="color:#66d9ef">new</span> FileLogger(<span style="color:#e6db74">&#34;test.txt&#34;</span>)), 
</span></span><span style="display:flex;"><span>        LogLevel.Warn
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> FilterLogLevelLogger(<span style="color:#66d9ef">new</span> ConsoleLogger(), LogLevel.Info)
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> var consoleLogger = <span style="color:#66d9ef">new</span> CompositeLogger(loggers);
</span></span><span style="display:flex;"><span>consoleLogger.Log(LogLevel.Info, <span style="color:#e6db74">&#34;Test&#34;</span>);
</span></span></code></pre></div><p>В данном примере сообщение попадёт только в консоль и файл даже не будет создан, так как в него могут попасть сообщения с уровнем Warn и выше.</p>
<h1 id="итог">Итог</h1>
<p>Не стоит боятся комбинировать разные паттерны если правильно их применять, можно сделать гибкую и расширяемую систему.</p>
<p>Конечно, так можно всё испортить, так что не стоит переусердствовать и всегда стоит думать, <em>а точно ли оно мне тут нужно?</em></p>
<h1 id="ссылки">Ссылки</h1>
<ul>
<li>
<a href="https://refactoring.guru/design-patterns/decorator" target="_blank">Decorator</a></li>
<li>
<a href="https://refactoring.guru/design-patterns/composite" target="_blank">Composite</a></li>
<li>
<a href="https://refactoring.guru/design-patterns/proxy" target="_blank">Proxy</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Logging_%28software%29#:~:text=In%20computing%2C%20a%20log%20file,to%20a%20single%20log%20file." target="_blank">Logging</a></li>
</ul>
]]></content></item><item><title>Дружелюбная Factory</title><link>https://blowin.github.io/portfolio/posts/2022/05/%D0%B4%D1%80%D1%83%D0%B6%D0%B5%D0%BB%D1%8E%D0%B1%D0%BD%D0%B0%D1%8F-factory/</link><pubDate>Sun, 01 May 2022 19:46:31 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/05/%D0%B4%D1%80%D1%83%D0%B6%D0%B5%D0%BB%D1%8E%D0%B1%D0%BD%D0%B0%D1%8F-factory/</guid><description>Сталкивались ли вы с проблемой, когда у вас есть factory, вы её создаёте там, где вам нужен определенный тип объекта и вы знаете, что нет необходимости передавать все зависимости в конструктор factory, так как они просто не нужны для создания. Тогда вы передаёте default/null?
Как правило, выглядит так себе:
var factory = new ObjFactory(null, docId, dbService, null, null); var doc = factory.Create(ObjType.Doc); У данного подхода я не вижу плюсов от слова &amp;lsquo;совсем&amp;rsquo;.</description><content type="html"><![CDATA[<p>Сталкивались ли вы с проблемой, когда у вас есть <strong>factory</strong>, вы её создаёте там, где вам нужен определенный тип объекта и вы знаете, что нет необходимости передавать все зависимости в конструктор <strong>factory</strong>, так как они просто не нужны для создания. Тогда вы передаёте default/null?</p>
<p>Как правило, выглядит так себе:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> factory = <span style="color:#66d9ef">new</span> ObjFactory(<span style="color:#66d9ef">null</span>, docId, dbService, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> doc = factory.Create(ObjType.Doc);
</span></span></code></pre></div><p>У данного подхода я не вижу плюсов от слова &lsquo;совсем&rsquo;.</p>
<p>Давайте лучше перейдём к минусам:</p>
<ul>
<li>Непонятно что мы проставляем в default. Т.е мы должны помнить какой параметр находится в какой позиции, а это проблематично, особенно, когда их много. 
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments" target="_blank">Named arguments</a> может улучшить ситуацию.</li>
<li>Мы должны знать/смотреть детали реализации, для корректного конфигурирования фабрики.</li>
<li>При необходимости новой зависимости которая уже передаётся в конструктор, никто нас не <del>погладит по головке</del> ударит по рукам, за то, что мы её используем в фабрике, но не исправили передачу данного аргумента (хочется получить сразу же ошибку компиляции).</li>
</ul>
<h1 id="решение">Решение</h1>
<hr>
<p>Используем эту фабрику:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> ReportType 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  SellThroughRateByProduct,
</span></span><span style="display:flex;"><span>  MonthEndInventoryValue,
</span></span><span style="display:flex;"><span>  PercentOfInventorySold
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IReport</span> { }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">SellThroughRateByProductReport</span>(ICollection&lt;Guid&gt; Products) : IReport;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">MonthEndInventoryValueReport</span>(DateOnly Date) : IReport;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">PercentOfInventorySoldReport</span>(ICollection&lt;Guid&gt; TypeOfProducts, DateOnly StartDate, DateOnly EndDate) : IReport;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ReportFactory</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ICollection&lt;Guid&gt; <span style="color:#ae81ff">_</span>products;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> DateOnly <span style="color:#ae81ff">_d</span>ate;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ICollection&lt;Guid&gt; <span style="color:#ae81ff">_</span>typeOfProducts;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> DateOnly <span style="color:#ae81ff">_</span>startDate;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> DateOnly <span style="color:#ae81ff">_</span>endDate;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ReportFactory(ICollection&lt;Guid&gt; products, DateOnly date, ICollection&lt;Guid&gt; typeOfProducts, DateOnly startDate, DateOnly endDate)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>products = products;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>ate = date;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>typeOfProducts = typeOfProducts;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>startDate = startDate;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>endDate = endDate;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IReport Create(ReportType type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ReportType.SellThroughRateByProduct:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// сложный код по получению данных, инициализации и т.д </span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SellThroughRateByProductReport(<span style="color:#ae81ff">_</span>products);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ReportType.MonthEndInventoryValue:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// сложный код по получению данных, инициализации и т.д</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> MonthEndInventoryValueReport(<span style="color:#ae81ff">_d</span>ate);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ReportType.PercentOfInventorySold:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// сложный код по получению данных, инициализации и т.д</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> PercentOfInventorySoldReport(<span style="color:#ae81ff">_</span>typeOfProducts, <span style="color:#ae81ff">_</span>startDate, <span style="color:#ae81ff">_</span>endDate);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(type), type, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Есть несколько вариантов решения данной проблемы. Рассмотрим каждый из них отдельно.</p>
<h2 id="вариант-1---фабричные-методы">Вариант 1 - Фабричные методы</h2>
<p>Фабрика сама знает какие зависимости для какого типа отчёта нужны, так давайте перенесем эту ответственность в саму factory, с использованием фабричных методов.</p>
<p>Дорабатываем ReportFactory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ReportFactory ForSellThroughRateByProduct(ICollection&lt;Guid&gt; products) =&gt;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">new</span> ReportFactory(products, <span style="color:#66d9ef">default</span>, Array.Empty&lt;Guid&gt;(), <span style="color:#66d9ef">default</span>, <span style="color:#66d9ef">default</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ReportFactory ForMonthEndInventoryValue(DateOnly date) 
</span></span><span style="display:flex;"><span>    =&gt; <span style="color:#66d9ef">new</span> ReportFactory(Array.Empty&lt;Guid&gt;(), date, Array.Empty&lt;Guid&gt;(), <span style="color:#66d9ef">default</span>, <span style="color:#66d9ef">default</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ReportFactory ForPercentOfInventorySold(ICollection&lt;Guid&gt; typeOfProducts, DateOnly startDate, DateOnly endDate) 
</span></span><span style="display:flex;"><span>    =&gt; <span style="color:#66d9ef">new</span> ReportFactory(Array.Empty&lt;Guid&gt;(), <span style="color:#66d9ef">default</span>, typeOfProducts, startDate, endDate);
</span></span></code></pre></div><h3 id="использование">Использование</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> factory = ReportFactory.ForMonthEndInventoryValue(<span style="color:#66d9ef">new</span> DateOnly(<span style="color:#ae81ff">2021</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> report = factory.Create(ReportType.MonthEndInventoryValue);
</span></span></code></pre></div><h3 id="примечание">Примечание</h3>
<p>Можно сделать так, чтобы эти методы возвращали сразу IReport, для избежания вызова <strong>factory.Create(ReportType.MonthEndInventoryValue)</strong>, чтобы не дублировать тип, так как это ещё одно потенциальное место для ошибки.</p>
<h3 id="плюсы">Плюсы</h3>
<ul>
<li>При необходимости новой зависимости, будем менять сигнатуру метода и код перестанет компилироваться в местах вызова.</li>
</ul>
<h3 id="минусы">Минусы</h3>
<ul>
<li>Если мы хотил создать фабрику для нескольких отчётов, то такой подход не подходит, рассмотрим это далее.</li>
</ul>
<h2 id="вариант-2---fluent-interface">Вариант 2 - Fluent interface</h2>
<p>Идея: добавляем методы для инициализации нужных полей.</p>
<p>ReportFactory будет выглядить следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Новый конструктор</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> ReportFactory() 
</span></span><span style="display:flex;"><span>        : <span style="color:#66d9ef">this</span>(Array.Empty&lt;Guid&gt;(), <span style="color:#66d9ef">default</span>, Array.Empty&lt;Guid&gt;(), <span style="color:#66d9ef">default</span>, <span style="color:#66d9ef">default</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Методы инициализации</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> ReportFactory ForSellThroughRateByProduct(ICollection&lt;Guid&gt; products)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>products = products;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> ReportFactory ForMonthEndInventoryValue(DateOnly date)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_d</span>ate = date;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> ReportFactory ForPercentOfInventorySold(ICollection&lt;Guid&gt; typeOfProducts, DateOnly startDate,
</span></span><span style="display:flex;"><span>    DateOnly endDate)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>typeOfProducts = typeOfProducts;
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>startDate = startDate;
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_</span>endDate = endDate;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="использование-1">Использование</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> factory = <span style="color:#66d9ef">new</span> ReportFactory()
</span></span><span style="display:flex;"><span>    .ForMonthEndInventoryValue(<span style="color:#66d9ef">new</span> DateOnly(<span style="color:#ae81ff">2021</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>    .ForSellThroughRateByProduct(<span style="color:#66d9ef">new</span> List&lt;Guid&gt; { bookId, tShirtId });
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> report1 = factory.Create(ReportType.MonthEndInventoryValue);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> report2 = factory.Create(ReportType.SellThroughRateByProduct);
</span></span></code></pre></div><h3 id="плюсы-1">Плюсы</h3>
<ul>
<li>При необходимости новой зависимости, будем менять сигнатуру метода и код перестанет компилироваться в местах вызова.</li>
<li>Можем сконфигурировать фабрику для нужного количества отчётов.</li>
</ul>
<h3 id="минусы-1">Минусы</h3>
<ul>
<li>Пустой конструктор, т.е мы можем создать абсолютно пустую ReportFactory.</li>
</ul>
<h2 id="вариант-3---группируем-поля">Вариант 3 - Группируем поля</h2>
<p>Выносим все необходимые зависимости для отчёта в отдельные объекты, чтобы они изначально группировались логически:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">SellThroughRateByProductParameter</span>(ICollection&lt;Guid&gt; Products);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">MonthEndInventoryValueReportParameter</span>(DateOnly Date);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">PercentOfInventorySoldReportParameter</span>(ICollection&lt;Guid&gt; TypeOfProducts, DateOnly StartDate, DateOnly EndDate);
</span></span></code></pre></div><p>Меняем ReportFactory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ReportFactory</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> SellThroughRateByProductParameter <span style="color:#ae81ff">_</span>sellThroughRateByProductParameter;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> MonthEndInventoryValueReportParameter <span style="color:#ae81ff">_</span>monthEndInventoryValueReportParameter;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PercentOfInventorySoldReportParameter <span style="color:#ae81ff">_</span>percentOfInventorySoldReportParameter;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ReportFactory(SellThroughRateByProductParameter sellThroughRateByProductParameter, 
</span></span><span style="display:flex;"><span>        MonthEndInventoryValueReportParameter monthEndInventoryValueReportParameter, 
</span></span><span style="display:flex;"><span>        PercentOfInventorySoldReportParameter percentOfInventorySoldReportParameter)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>sellThroughRateByProductParameter = sellThroughRateByProductParameter;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>monthEndInventoryValueReportParameter = monthEndInventoryValueReportParameter;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>percentOfInventorySoldReportParameter = percentOfInventorySoldReportParameter;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IReport Create(ReportType type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ReportType.SellThroughRateByProduct:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SellThroughRateByProductReport(<span style="color:#ae81ff">_</span>sellThroughRateByProductParameter.Products);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ReportType.MonthEndInventoryValue:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> MonthEndInventoryValueReport(<span style="color:#ae81ff">_</span>monthEndInventoryValueReportParameter.Date);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ReportType.PercentOfInventorySold:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> PercentOfInventorySoldReport(<span style="color:#ae81ff">_</span>percentOfInventorySoldReportParameter.TypeOfProducts, <span style="color:#ae81ff">_</span>percentOfInventorySoldReportParameter.StartDate, <span style="color:#ae81ff">_</span>percentOfInventorySoldReportParameter.EndDate);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(type), type, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Почему в Create просто не передать объект в конструктор отчёта?</p>
<p>Можно, но все зависит от ситуации:</p>
<ol>
<li>
<p>Возможно вы используете чужой код и там уже передаются параметры отдельно.</p>
</li>
<li>
<p>Перед созданием может быть логика получения и подготовки данных, на основе параметров, переданных в фабрику. Скорее всего в реальности, абсолютно другие данные будут передаваться в конструктор, после получения необходимой информации.</p>
</li>
</ol>
<h2 id="ссылки">Ссылки</h2>
<ul>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments" target="_blank">Named arguments</a></li>
<li>
<a href="https://refactoring.guru/design-patterns/factory-method" target="_blank">Factory</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Fluent_interface#:~:text=In%20software%20engineering%2C%20a%20fluent,Eric%20Evans%20and%20Martin%20Fowler." target="_blank">Fluent interface</a></li>
</ul>
]]></content></item><item><title>Enum и switch, сквозь года</title><link>https://blowin.github.io/portfolio/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</link><pubDate>Fri, 29 Apr 2022 19:16:46 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</guid><description>Пару лет назад я написал о Enum и switch и что с ним не так. По прошествии нескольких лет, произошли определенные переосмысления, которые выросли в данную статью.
Проблема Проблема остаётся той же:
огромные switch по всему коду проблемы с поддержкой этого добра. Что использовать для решения проблемы Будем использовать библиотеку SmartEnum.
На самом деле подобный функционал реализуется за 15 минут, если по каким-то причинам вы не хотите тянуть лишнюю зависимость в ваше детище ваш проект.</description><content type="html"><![CDATA[<p>Пару лет назад я написал о 
<a href="/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/">Enum и switch и что с ним не так</a>. По прошествии нескольких лет, произошли определенные переосмысления, которые выросли в данную статью.</p>
<h1 id="проблема">Проблема</h1>
<hr>
<p>Проблема остаётся той же:</p>
<ul>
<li>огромные switch по всему коду</li>
<li>проблемы с поддержкой этого <del>добра</del>.</li>
</ul>
<h1 id="что-использовать-для-решения-проблемы">Что использовать для решения проблемы</h1>
<hr>
<p>Будем использовать библиотеку 
<a href="https://github.com/ardalis/SmartEnum" target="_blank">SmartEnum</a>.</p>
<blockquote>
<p>На самом деле подобный функционал реализуется за 15 минут, если по каким-то причинам вы не хотите тянуть лишнюю зависимость в <del>ваше детище</del> ваш проект.</p>
</blockquote>
<p>Благодаря этой библиотеке мы описываем класс, а уже дальше работаем с этим типом, как с enum.</p>
<p>К этой библиотеке существует множество плагинов, таких как: сериализации, работа с EF и многое другое. (подробнее в репозитории)</p>
<h1 id="задача">Задача</h1>
<hr>
<p>Есть список объектов, которые нужно экспортировать в несколько форматов:</p>
<ul>
<li>json</li>
<li>xml</li>
</ul>
<h1 id="решение">Решение</h1>
<hr>
<p>Давайте сразу опишем типы, которые будем использовать:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Объект для экспорта</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Project</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Name { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> DateOnly Date { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> DateOnly Deadline { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Интерфейс для экспорта</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IProjectExporter</span> : IDisposable
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; projects);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">JsonExporter</span>(Stream Stream) : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items) =&gt; JsonSerializer.Serialize(Stream, items);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExporter</span> : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> StreamWriter <span style="color:#ae81ff">_</span>streamWriter;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> XmlSerializer <span style="color:#ae81ff">_</span>xmlSerializer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> List&lt;Project&gt; <span style="color:#ae81ff">_l</span>ist;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> XmlExporter(Stream stream)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(stream, <span style="color:#66d9ef">null</span>, -<span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer = <span style="color:#66d9ef">new</span> XmlSerializer(<span style="color:#66d9ef">typeof</span>(List&lt;Project&gt;));
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist = <span style="color:#66d9ef">new</span> List&lt;Project&gt;();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.Clear();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.AddRange(items);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer.Serialize(<span style="color:#ae81ff">_</span>streamWriter, <span style="color:#ae81ff">_l</span>ist);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Flush();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Dispose();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="как-это-решается-обычно">Как это решается обычно</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> ExportType
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Json,
</span></span><span style="display:flex;"><span>    Xml
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IProjectExporter CreateExporter(ExportType type, Stream stream)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Json:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> JsonExporter(stream);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Xml:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> XmlExporter(stream);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid export type&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetContentType(ExportType type)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Json:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;application/json&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Xml:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;text/xml&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid export type&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetExtension(ExportType type)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Json:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;json&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Xml:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;xml&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid export type&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="минусы">Минусы</h3>
<ul>
<li>При добавлении нового типа, необходимо найти все switch и поправить их. А если в проекте ещё несколько solution&rsquo;ов, то будет совсем больно.</li>
<li>При желании добавить новую логику, можно забыть case. Да да да, я знаю, что сейчас ide генерируют все автоматически, но я часто встречал switch, где не все типы указаны, потому что человек <del>забыл</del> &lsquo;знает&rsquo;, что другие варианты точно не могут тут быть.</li>
</ul>
<h3 id="примечание">Примечание</h3>
<p>Если заменить статические методы на extension, то может будет не так плохо.</p>
<h2 id="решение-с-использованием-smartenum">Решение с использованием SmartEnum</h2>
<p>Сразу отмечу, что классы реализующие IProjectExporter, можно сделать приватными для JsonExportType и XmlExportType соответственно.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExportType</span> : SmartEnum&lt;ExportType&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ExportType(<span style="color:#66d9ef">string</span> name, <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(name, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Json = <span style="color:#66d9ef">new</span> JsonExportType(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Xml = <span style="color:#66d9ef">new</span> XmlExportType(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">string</span> ContentType { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> IProjectExporter CreateExporter(Stream destinationStream);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JsonExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> JsonExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;json&#34;</span>, <span style="color:#66d9ef">value</span>) {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">string</span> ContentType =&gt; <span style="color:#e6db74">&#34;application/json&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> IProjectExporter CreateExporter(Stream destinationStream) =&gt; <span style="color:#66d9ef">new</span> JsonExporter(destinationStream);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> XmlExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;xml&#34;</span>, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">string</span> ContentType =&gt; <span style="color:#e6db74">&#34;text/xml&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> IProjectExporter CreateExporter(Stream destinationStream) =&gt; <span style="color:#66d9ef">new</span> XmlExporter(destinationStream);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="пример-использования">Пример использования</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.CreateExporter(destination);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(<span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="что-делать-если-нужно-дать-возможность-расширять-наш-тип-снаружи">Что делать, если нужно дать возможность расширять наш тип снаружи?</h1>
<hr>
<p>Если для какого-то из типов необходимы свои сервисы, отдельная обработка, то это решается тем же подходом, что и в прошлой статье.</p>
<p>Внимание, типы из ExportType делаем публичными, для возможности работы с конкретным типом.</p>
<p>Опишем интерфейс:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IExportTypeVisitor</span>&lt;<span style="color:#66d9ef">out</span> TRes&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    TRes Visit(ExportType.JsonExportType type);
</span></span><span style="display:flex;"><span>    TRes Visit(ExportType.XmlExportType type);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Exporter&rsquo;ы вынесем наружу и сделаем разные конструкторы, чтобы проблема была очевидна:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">JsonExporter</span>(Stream Stream) : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items) =&gt; JsonSerializer.Serialize(Stream, items);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExporter</span> : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> StreamWriter <span style="color:#ae81ff">_</span>streamWriter;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> XmlSerializer <span style="color:#ae81ff">_</span>xmlSerializer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> List&lt;Project&gt; <span style="color:#ae81ff">_l</span>ist;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> XmlExporter(Stream stream, <span style="color:#66d9ef">int</span> pageSize, Encoding? encoding = <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(stream, encoding, -<span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer = <span style="color:#66d9ef">new</span> XmlSerializer(<span style="color:#66d9ef">typeof</span>(List&lt;Project&gt;));
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist = <span style="color:#66d9ef">new</span> List&lt;Project&gt;(pageSize);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.Clear();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.AddRange(items);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer.Serialize(<span style="color:#ae81ff">_</span>streamWriter, <span style="color:#ae81ff">_l</span>ist);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Flush();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Dispose();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="вариант-1---visitor">Вариант 1 - Visitor</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExportType</span> : SmartEnum&lt;ExportType&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ExportType(<span style="color:#66d9ef">string</span> name, <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(name, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Json = <span style="color:#66d9ef">new</span> JsonExportType(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Xml = <span style="color:#66d9ef">new</span> XmlExportType(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> TRes Accept&lt;TRes&gt;(IExportTypeVisitor&lt;TRes&gt; visitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JsonExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> JsonExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;json&#34;</span>, <span style="color:#66d9ef">value</span>) {}
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Accept&lt;TRes&gt;(IExportTypeVisitor&lt;TRes&gt; visitor) =&gt; visitor.Visit(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> XmlExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;xml&#34;</span>, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Accept&lt;TRes&gt;(IExportTypeVisitor&lt;TRes&gt; visitor) =&gt; visitor.Visit(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Visitor для создания Exporter&rsquo;а</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ProjectExporterVisitor</span> : IExportTypeVisitor&lt;IProjectExporter&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Stream <span style="color:#ae81ff">_</span>stream;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">int</span> <span style="color:#ae81ff">_</span>pageSize;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ProjectExporterVisitor(Stream stream, <span style="color:#66d9ef">int</span> pageSize)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>stream = stream;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>pageSize = pageSize;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IProjectExporter Visit(ExportType.JsonExportType type) =&gt; <span style="color:#66d9ef">new</span> JsonExporter(<span style="color:#ae81ff">_</span>stream);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IProjectExporter Visit(ExportType.XmlExportType type) =&gt; <span style="color:#66d9ef">new</span> XmlExporter(<span style="color:#ae81ff">_</span>stream, <span style="color:#ae81ff">_</span>pageSize, Encoding.UTF8);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Собираем всё воедино:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> pageSize = <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.Accept(<span style="color:#66d9ef">new</span> ProjectExporterVisitor(destination, pageSize));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(pageSize))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="вариант-2---match--func">Вариант 2 - Match + Func</h2>
<p>В отличии от прошлого способа, у нас пропадает 2 сущности:</p>
<ul>
<li>ProjectExporterVisitor</li>
<li>IExportTypeVisitor</li>
</ul>
<p>Теперь ExportType будет выглядеть следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExportType</span> : SmartEnum&lt;ExportType&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ExportType(<span style="color:#66d9ef">string</span> name, <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(name, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Json = <span style="color:#66d9ef">new</span> JsonExportType(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Xml = <span style="color:#66d9ef">new</span> XmlExportType(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> TRes Match&lt;TRes&gt;(Func&lt;JsonExportType, TRes&gt; visitJson, Func&lt;XmlExportType, TRes&gt; visitXml);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JsonExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> JsonExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;json&#34;</span>, <span style="color:#66d9ef">value</span>) {}
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Match&lt;TRes&gt;(Func&lt;JsonExportType, TRes&gt; visitJson, Func&lt;XmlExportType, TRes&gt; visitXml) 
</span></span><span style="display:flex;"><span>            =&gt; visitJson(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> XmlExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;xml&#34;</span>, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Match&lt;TRes&gt;(Func&lt;JsonExportType, TRes&gt; visitJson, Func&lt;XmlExportType, TRes&gt; visitXml)
</span></span><span style="display:flex;"><span>            =&gt; visitXml(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Собираем всё воедино:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> pageSize = <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.Match&lt;IProjectExporter&gt;(
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span> =&gt; <span style="color:#66d9ef">new</span> JsonExporter(destination),
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span> =&gt; <span style="color:#66d9ef">new</span> XmlExporter(destination, pageSize, Encoding.UTF8));
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(pageSize))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Данный способ удобен, когда не нужно переиспользовать Visitor. По-моему во втором варианте код более читабелен.</p>
<h2 id="вариант-3---funcvisitor">Вариант 3 - FuncVisitor</h2>
<p>Просто комбинируем 2 подхода</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> pageSize = <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.Accept(<span style="color:#66d9ef">new</span> FuncExporterVisitor&lt;IProjectExporter&gt;(
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span> =&gt; <span style="color:#66d9ef">new</span> JsonExporter(destination),
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span> =&gt; <span style="color:#66d9ef">new</span> XmlExporter(destination, pageSize, Encoding.UTF8));
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(pageSize))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="что-с-производительностью">Что с производительностью?</h2>
<p>Конечно, использование Func или Visitor, несет за собой лишние аллокации.</p>
<p>Есть 2 решения:</p>
<ul>
<li>
<p>Меняем сигнатуру метода <strong>Accept</strong>. Принимаем не: <strong>IExportTypeVisitor&lt;T&gt;</strong>, а <strong>TVisitor where TVisitor : IExportTypeVisitor&lt;T&gt;</strong> (да, код будет более многословен, придётся указывать явно 2 generic параметра), но тогда мы сможем описывать структуры, а не классы в качестве Visitor&rsquo;ов.</p>
</li>
<li>
<p>Кэшируем Visitor&rsquo;ы и делаем их мутабельными, но сразу же возникают следующие проблемы:</p>
<ul>
<li>Параллельное использование.</li>
<li>Удобство применения. (нужно reset&rsquo;ить значения и не забывать их установить перед вызовом)</li>
</ul>
</li>
</ul>
<h1 id="итог">Итог</h1>
<hr>
<ul>
<li>
<p>Не стоит плодить по коду switch для одного enum, особенно, если нужна разная логика обработки каждого типа.</p>
</li>
<li>
<p>Пользуемся прекрасным и неоднозначным принципом 
<a href="https://stackify.com/solid-design-principles/" target="_blank">SRP</a>, чтобы собрать необходимую логику воедино.</p>
</li>
</ul>
<h1 id="ссылки">Ссылки</h1>
<hr>
<ul>
<li>
<a href="/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/">Прошлая статья</a></li>
<li>
<a href="https://github.com/ardalis/SmartEnum" target="_blank">SmartEnum</a></li>
<li>
<a href="https://stackify.com/solid-design-principles/" target="_blank">SRP</a></li>
</ul>
]]></content></item><item><title>Enum и switch, и что с ними не так</title><link>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</link><pubDate>Fri, 04 Sep 2020 14:00:00 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</guid><description>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?
Идея Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!
Идея состоит в том, чтобы заменить использование switch паттерном visitor.
Пример 1 Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</description><content type="html"><![CDATA[<p>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?</p>
<h1 id="идея">Идея</h1>
<hr>
<p>Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!</p>
<p>Идея состоит в том, чтобы заменить использование switch паттерном visitor.</p>
<h1 id="пример-1">Пример 1</h1>
<hr>
<p>Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</p>
<p>Определим файл <strong>DocumentType.cs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> DocumentType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Invoice,
</span></span><span style="display:flex;"><span>        PrepaymentAccount
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IDocumentVisitor</span>&lt;<span style="color:#66d9ef">out</span> T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        T VisitInvoice();
</span></span><span style="display:flex;"><span>        T VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DocumentTypeExt</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Accept&lt;T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, IDocumentVisitor&lt;T&gt; visitor)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> (self)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.Invoice:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitInvoice();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.PrepaymentAccount:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(self), self, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>И да, я предлагаю определять все связанные типы в одном файле, что не является идиоматичным для .Net разработчика. Но иногда это очень ухудшает упрощает понимание кода.</p>
<p>Опишем visitor который будет искать в базе нужный документ <strong>DatabaseSearchVisitor.cs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseSearchVisitor</span> : IDocumentVisitor&lt;IDocument&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> ApiId <span style="color:#ae81ff">_</span>id;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> Database <span style="color:#ae81ff">_d</span>b;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> DatabaseSearchVisitor(ApiId id, Database db)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>id = id;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_d</span>b = db;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> IDocument VisitInvoice() =&gt; <span style="color:#ae81ff">_d</span>b.SearchInvoice(<span style="color:#ae81ff">_</span>id);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> IDocument VisitPrepaymentAccount() =&gt; <span style="color:#ae81ff">_d</span>b.SearchPrepaymentAccount(<span style="color:#ae81ff">_</span>id);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>И потом его использование:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> searchVisitor = <span style="color:#66d9ef">new</span> DatabaseSearchVisitor(doc.Id, <span style="color:#ae81ff">_d</span>b);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Accept(searchVisitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h1 id="пример-2">Пример 2</h1>
<hr>
<p>У нас есть события, которые выглядят следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> PurseEventType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Increase,
</span></span><span style="display:flex;"><span>        Decrease,
</span></span><span style="display:flex;"><span>        Block,
</span></span><span style="display:flex;"><span>        Unlock
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurseEvent</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEventType Type { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Json { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEvent(PurseEventType type, <span style="color:#66d9ef">string</span> json)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Type = type;
</span></span><span style="display:flex;"><span>            Json = json;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Мы хотим отправлять уведомления пользователю на определенный тип событий. Тогда реализуем visitor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IPurseEventTypeVisitor</span>&lt;<span style="color:#66d9ef">out</span> T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        T VisitIncrease();
</span></span><span style="display:flex;"><span>        T VisitDecrease();
</span></span><span style="display:flex;"><span>        T VisitBlock();
</span></span><span style="display:flex;"><span>        T VisitUnlock();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurseEventTypeNotificationVisitor</span> : IPurseEventTypeVisitor&lt;Missing&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> INotificationManager <span style="color:#ae81ff">_</span>notificationManager;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PurseEventParser <span style="color:#ae81ff">_</span>eventParser;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PurseEvent <span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEventTypeNotificationVisitor(PurseEvent @event, PurseEventParser eventParser, INotificationManager notificationManager)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager = notificationManager;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span> = @event;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>eventParser = eventParser;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitIncrease() =&gt; Missing.Value;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitDecrease() =&gt; Missing.Value;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitBlock()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> blockEvent = <span style="color:#ae81ff">_</span>eventParser.ParseBlock(<span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager.NotifyBlockPurseEvent(blockEvent);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Missing.Value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitUnlock()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> blockEvent = <span style="color:#ae81ff">_</span>eventParser.ParseUnlock(<span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager.NotifyUnlockPurseEvent(blockEvent);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Missing.Value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Для примера не будем ничего возвращать. Для этого можно воспользоваться типом Missing из System.Reflection или же написать тип Unit. В реальном проекте возвращался бы Result, например, с информацией об ошибке, если такие имеются.</p>
<p>И пример использования:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SendNotification(PurseEvent @event)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> notificationVisitor = <span style="color:#66d9ef">new</span> PurseEventTypeNotificationVisitor(@event, <span style="color:#ae81ff">_</span>eventParser, <span style="color:#ae81ff">_</span>notificationManager);
</span></span><span style="display:flex;"><span>        @event.Type.Accept(notificationVisitor);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h1 id="дополнение">Дополнение</h1>
<hr>
<h3 id="если-нужно-быстрее">Если нужно быстрее</h3>
<p>Если нужно использовать такой подход там, где важна производительность, в качестве visitor можно использовать структуры. Тогда код изменится следующим образом.</p>
<p>Метод расширение:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Accept&lt;TVisitor, T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, <span style="color:#66d9ef">in</span> TVisitor visitor)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">where</span> TVisitor : IDocumentVisitor&lt;T&gt;
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> (self)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.Invoice:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitInvoice();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.PrepaymentAccount:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(self), self, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p>Сам visitor остаётся прежним, только меняем class на struct.</p>
<p>И сам код обновления документа выглядит не так удобно, но работает быстро:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> searchVisitor = <span style="color:#66d9ef">new</span> DatabaseSearchVisitor(doc.Id, <span style="color:#ae81ff">_d</span>b);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Accept&lt;DatabaseSearchVisitor, IDocument&gt;(searchVisitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>При таком использовании generic, необходимо уточнять типы самому, так как компилятор не хочет способен вывести их автоматически.</p>
<h3 id="читабельность-и-in-place-реализация">Читабельность и in-place реализация</h3>
<p>Если нужно реализовать логику только в одном месте, то часто visitor — громоздко и не удобно. Поэтому есть альтернативное решение <strong>match</strong>.</p>
<p>Сразу пример со структурой:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Match&lt;T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, Func&lt;T&gt; invoiceCase, Func&lt;T&gt; prepaymentAccountCase)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> visitor = <span style="color:#66d9ef">new</span> FuncVisitor&lt;T&gt;(invoiceCase, prepaymentCase);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self.Accept&lt;FuncVisitor&lt;T&gt;, T&gt;(visitor);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Сам <strong>FuncVisitor</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">FuncVisitor</span>&lt;T&gt; : IDocumentVisitor&lt;T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;T&gt; <span style="color:#ae81ff">_</span>invoiceCase;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;T&gt; <span style="color:#ae81ff">_</span>prepaymentAccountCase;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> FuncVisitor(Func&lt;T&gt; invoiceCase, Func&lt;T&gt; prepaymentAccountCase)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>invoiceCase = invoiceCase;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>prepaymentAccountCase = prepaymentAccountCase;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> T VisitInvoice() =&gt; <span style="color:#ae81ff">_</span>invoiceCase();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> T VisitPrepaymentAccount() =&gt; <span style="color:#ae81ff">_</span>prepaymentAccountCase();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Использование <strong>match</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Match(
</span></span><span style="display:flex;"><span>        () =&gt; <span style="color:#ae81ff">_d</span>b.SearchInvoice(doc.Id),
</span></span><span style="display:flex;"><span>        () =&gt; <span style="color:#ae81ff">_d</span>b.SearchPrepaymentAccount(doc.Id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="итог">Итог</h1>
<hr>
<p>При добавлении нового значения в enum необходимо:</p>
<p>   1.  Добавить метод в интерфейс.</p>
<p>   2.  Добавить его использование в метод расширение.</p>
<p>Для остальных мест компилятор подскажет нам, где необходимо реализовать новый метод.<br>
Таким образом мы избавляемся от проблемы забытого case в switch.</p>
<p>Это все еще не серебряная пуля, но может здорово помочь в работе с enum.</p>
<!-- raw HTML omitted -->
<h1 id="ссылки">Ссылки</h1>
<hr>
<ul>
<li>
<a href="https://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/" target="_blank">https://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Unit_type" target="_blank">https://en.wikipedia.org/wiki/Unit_type</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results" target="_blank">https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results</a></li>
</ul>
]]></content></item></channel></rss>