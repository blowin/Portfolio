<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Блог on Сущевский Дмитрий</title><link>https://blowin.github.io/portfolio/posts/</link><description>Recent content in Блог on Сущевский Дмитрий</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blowin.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Enum и switch, сквозь года</title><link>https://blowin.github.io/portfolio/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</link><pubDate>Fri, 29 Apr 2022 19:16:46 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2022/04/enum-%D0%B8-switch-%D1%81%D0%BA%D0%B2%D0%BE%D0%B7%D1%8C-%D0%B3%D0%BE%D0%B4%D0%B0/</guid><description>Пару лет назад, я писал статью. По прошествии нескольких лет, произошли определенные переосмысления, которые выросли в данную статью.
Проблема Проблема остаётся той же, большие switch по всему коду и проблемами их поддержания.
Решение Будем использовать библиотеку SmartEnum(не панацея и подобный функционал реализуется за 15 минут). Благодаря этой библиотеке мы просто описываем класс (или несколько, если это необходимо) и потом удобно используем в коде. К этой библиотеке существует много плагинов для сериализации, работы с EF и многое другое.</description><content type="html"><![CDATA[<p>Пару лет назад, 
<a href="/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/">я писал статью</a>. По прошествии нескольких лет, произошли определенные переосмысления, которые выросли в данную статью.</p>
<h1 id="проблема">Проблема</h1>
<hr>
<p>Проблема остаётся той же, большие switch по всему коду и проблемами их поддержания.</p>
<h1 id="решение">Решение</h1>
<hr>
<p>Будем использовать библиотеку 
<a href="https://github.com/ardalis/SmartEnum" target="_blank">SmartEnum</a>(не панацея и подобный функционал реализуется за 15 минут). Благодаря этой библиотеке мы просто описываем класс (или несколько, если это необходимо) и потом удобно используем в коде. К этой библиотеке существует много плагинов для сериализации, работы с EF и многое другое.</p>
<p>Будем решать вполне реальную задачу: есть список объектов, нужно экспортировать его в несколько форматов.</p>
<p>Сразу опишу типы, которые будем использовать:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Объект для экспорта</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Project</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Name { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> DateOnly Date { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> DateOnly Deadline { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Интерфейс для экспорта</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IProjectExporter</span> : IDisposable
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; projects);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">JsonExporter</span>(Stream Stream) : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items) =&gt; JsonSerializer.Serialize(Stream, items);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExporter</span> : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> StreamWriter <span style="color:#ae81ff">_</span>streamWriter;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> XmlSerializer <span style="color:#ae81ff">_</span>xmlSerializer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> List&lt;Project&gt; <span style="color:#ae81ff">_l</span>ist;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> XmlExporter(Stream stream)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(stream, <span style="color:#66d9ef">null</span>, -<span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer = <span style="color:#66d9ef">new</span> XmlSerializer(<span style="color:#66d9ef">typeof</span>(List&lt;Project&gt;));
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist = <span style="color:#66d9ef">new</span> List&lt;Project&gt;();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.Clear();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.AddRange(items);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer.Serialize(<span style="color:#ae81ff">_</span>streamWriter, <span style="color:#ae81ff">_l</span>ist);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Flush();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Dispose();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="для-начала-рассмотрим-пример-того-как-это-решается-обычно">Для начала рассмотрим пример того, как это решается обычно:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> ExportType
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Json,
</span></span><span style="display:flex;"><span>    Xml
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IProjectExporter CreateExporter(ExportType type, Stream stream)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Json:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> JsonExporter(stream);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Xml:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> XmlExporter(stream);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid export type&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetContentType(ExportType type)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Json:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;application/json&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Xml:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;text/xml&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid export type&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetExtension(ExportType type)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (type)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Json:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;json&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> ExportType.Xml:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;xml&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentException(<span style="color:#e6db74">&#34;Invalid export type&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="минусы-очевидны">Минусы очевидны</h3>
<ul>
<li>При добавлении нового типа, необходимо найти все switch и поправь их. А если в проекте ещё несколько solution&rsquo;ов, то будет совсем больно.</li>
<li>При желании добавить новую логику, можно забыть case. Да да да, я знаю, что сейчас ide генерируют все автоматически, но я часто встречал switch, где не все типы указаны, потому что человек <del>забыл</del> &lsquo;знает&rsquo;, что другие варианты точно не могут тут быть.</li>
</ul>
<h3 id="примечание">Примечание</h3>
<p>Если заменить статические методы на extension, то может будет не так больно.</p>
<h2 id="вариант-решения-с-использованием-smartenum">Вариант решения с использованием SmartEnum:</h2>
<p>Сразу отмечу, что классы реализующие IProjectExporter, можно сделать приватными для JsonExportType и XmlExportType соответственно.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExportType</span> : SmartEnum&lt;ExportType&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ExportType(<span style="color:#66d9ef">string</span> name, <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(name, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Json = <span style="color:#66d9ef">new</span> JsonExportType(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Xml = <span style="color:#66d9ef">new</span> XmlExportType(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">string</span> ContentType { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> IProjectExporter CreateExporter(Stream destinationStream);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JsonExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> JsonExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;json&#34;</span>, <span style="color:#66d9ef">value</span>) {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">string</span> ContentType =&gt; <span style="color:#e6db74">&#34;application/json&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> IProjectExporter CreateExporter(Stream destinationStream) =&gt; <span style="color:#66d9ef">new</span> JsonExporter(destinationStream);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> XmlExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;xml&#34;</span>, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">string</span> ContentType =&gt; <span style="color:#e6db74">&#34;text/xml&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> IProjectExporter CreateExporter(Stream destinationStream) =&gt; <span style="color:#66d9ef">new</span> XmlExporter(destinationStream);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="пример-использования">Пример использования</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.CreateExporter(destination);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(<span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Если для какого-то из типов необходимы свои сервисы, отдельная обработка, то это решается тем же подходом, что и в прошлой статье.</p>
<h3 id="вариант-1-простой-visitor">Вариант 1 (простой visitor)</h3>
<p>Внимание, типы из ExportType делаем публичными, для возможности работы с конкретным типом.</p>
<p>Опишем интерфейс:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IExportTypeVisitor</span>&lt;<span style="color:#66d9ef">out</span> TRes&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    TRes Visit(ExportType.JsonExportType type);
</span></span><span style="display:flex;"><span>    TRes Visit(ExportType.XmlExportType type);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Exporter&rsquo;ы вынесем наружу и сделаем разные конструкторы, чтобы проблема была очевидна:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">JsonExporter</span>(Stream Stream) : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items) =&gt; JsonSerializer.Serialize(Stream, items);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExporter</span> : IProjectExporter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> StreamWriter <span style="color:#ae81ff">_</span>streamWriter;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> XmlSerializer <span style="color:#ae81ff">_</span>xmlSerializer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> List&lt;Project&gt; <span style="color:#ae81ff">_l</span>ist;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> XmlExporter(Stream stream, <span style="color:#66d9ef">int</span> pageSize, Encoding? encoding = <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(stream, encoding, -<span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer = <span style="color:#66d9ef">new</span> XmlSerializer(<span style="color:#66d9ef">typeof</span>(List&lt;Project&gt;));
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist = <span style="color:#66d9ef">new</span> List&lt;Project&gt;(pageSize);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ICollection&lt;Project&gt; items)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.Clear();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_l</span>ist.AddRange(items);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>xmlSerializer.Serialize(<span style="color:#ae81ff">_</span>streamWriter, <span style="color:#ae81ff">_l</span>ist);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Flush();
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>streamWriter.Dispose();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Сами типы:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExportType</span> : SmartEnum&lt;ExportType&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ExportType(<span style="color:#66d9ef">string</span> name, <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(name, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Json = <span style="color:#66d9ef">new</span> JsonExportType(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Xml = <span style="color:#66d9ef">new</span> XmlExportType(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> TRes Accept&lt;TRes&gt;(IExportTypeVisitor&lt;TRes&gt; visitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JsonExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> JsonExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;json&#34;</span>, <span style="color:#66d9ef">value</span>) {}
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Accept&lt;TRes&gt;(IExportTypeVisitor&lt;TRes&gt; visitor) =&gt; visitor.Visit(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> XmlExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;xml&#34;</span>, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Accept&lt;TRes&gt;(IExportTypeVisitor&lt;TRes&gt; visitor) =&gt; visitor.Visit(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Visitor для создания Exporter&rsquo;а</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ProjectExporterVisitor</span> : IExportTypeVisitor&lt;IProjectExporter&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Stream <span style="color:#ae81ff">_</span>stream;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">int</span> <span style="color:#ae81ff">_</span>pageSize;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ProjectExporterVisitor(Stream stream, <span style="color:#66d9ef">int</span> pageSize)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>stream = stream;
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span>pageSize = pageSize;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IProjectExporter Visit(ExportType.JsonExportType type) =&gt; <span style="color:#66d9ef">new</span> JsonExporter(<span style="color:#ae81ff">_</span>stream);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IProjectExporter Visit(ExportType.XmlExportType type) =&gt; <span style="color:#66d9ef">new</span> XmlExporter(<span style="color:#ae81ff">_</span>stream, <span style="color:#ae81ff">_</span>pageSize, Encoding.UTF8);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Собираем всё воедино:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> pageSize = <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.Accept(<span style="color:#66d9ef">new</span> ProjectExporterVisitor(destination, pageSize));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(pageSize))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="вариант-2-match--func">Вариант 2 (match + Func)</h3>
<p>В отличии от прошлого способа, у нас пропадает 2 сущности, такие как ProjectExporterVisitor и IExportTypeVisitor</p>
<p>Теперь ExportType будет выглядеть следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExportType</span> : SmartEnum&lt;ExportType&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ExportType(<span style="color:#66d9ef">string</span> name, <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(name, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Json = <span style="color:#66d9ef">new</span> JsonExportType(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> ExportType Xml = <span style="color:#66d9ef">new</span> XmlExportType(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> TRes Match&lt;TRes&gt;(Func&lt;JsonExportType, TRes&gt; visitJson, Func&lt;XmlExportType, TRes&gt; visitXml);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JsonExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> JsonExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;json&#34;</span>, <span style="color:#66d9ef">value</span>) {}
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Match&lt;TRes&gt;(Func&lt;JsonExportType, TRes&gt; visitJson, Func&lt;XmlExportType, TRes&gt; visitXml) 
</span></span><span style="display:flex;"><span>            =&gt; visitJson(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XmlExportType</span> : ExportType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> XmlExportType(<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">value</span>) : <span style="color:#66d9ef">base</span>(<span style="color:#e6db74">&#34;xml&#34;</span>, <span style="color:#66d9ef">value</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> TRes Match&lt;TRes&gt;(Func&lt;JsonExportType, TRes&gt; visitJson, Func&lt;XmlExportType, TRes&gt; visitXml)
</span></span><span style="display:flex;"><span>            =&gt; visitXml(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Собираем всё воедино:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Export(ExportType type, Stream destination)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> pageSize = <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> var exporter = type.Match&lt;IProjectExporter&gt;(
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span> =&gt; <span style="color:#66d9ef">new</span> JsonExporter(destination),
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_</span> =&gt; <span style="color:#66d9ef">new</span> XmlExporter(destination, pageSize, Encoding.UTF8));
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> page <span style="color:#66d9ef">in</span> GetPaged(pageSize))
</span></span><span style="display:flex;"><span>        exporter.Export(page);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Данный способ удобен, когда не нужно переиспользовать Visitor, тогда такой вариант более подходящий и читабелен, также возможно комбинировать 2 этих подхода.</p>
<h2 id="итог">Итог</h2>
<p>Не стоит плодить по коду непонятные switch, просто нужно собрать необходимую логику воедино, в удобный API.</p>
<h2 id="ссылки">Ссылки</h2>
<!-- raw HTML omitted -->
<ul>
<li>
<a href="/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/">Прошлая статья</a></li>
<li>
<a href="https://github.com/ardalis/SmartEnum" target="_blank">SmartEnum</a></li>
</ul>
]]></content></item><item><title>Enum и switch, и что с ними не так</title><link>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</link><pubDate>Fri, 04 Sep 2020 14:00:00 +0300</pubDate><guid>https://blowin.github.io/portfolio/posts/2020/09/enum-%D0%B8-switch-%D0%B8-%D1%87%D1%82%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC%D0%B8-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA/</guid><description>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?
Идея Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!
Идея состоит в том, чтобы заменить использование switch паттерном visitor.
Пример 1 Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</description><content type="html"><![CDATA[<p>Часто ли у вас было такое, что вы добавляли новое значение в enum и потом тратили часы на то, чтобы найти все места его использования, а затем добавить новый case, чтобы не получить ArgumentOutOfRangeException во время исполнения?</p>
<!-- raw HTML omitted -->
<h1 id="идея">Идея</h1>
<hr>
<!-- raw HTML omitted -->
<p>Если проблема состоит только в switch операторе и отслеживании новых типов, тогда давайте избавимся от них!</p>
<p>Идея состоит в том, чтобы заменить использование switch паттерном visitor.</p>
<!-- raw HTML omitted -->
<h1 id="пример-1">Пример 1</h1>
<hr>
<!-- raw HTML omitted -->
<p>Предположим у нас есть какой-то API для работы с документами, от которого мы получаем необходимые данные и определяем его тип, а далее в зависимости от этого типа, необходимо делать различные операции.</p>
<!-- raw HTML omitted -->
<p>Определим файл <strong>DocumentType.cs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> DocumentType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Invoice,
</span></span><span style="display:flex;"><span>        PrepaymentAccount
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IDocumentVisitor</span>&lt;<span style="color:#66d9ef">out</span> T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        T VisitInvoice();
</span></span><span style="display:flex;"><span>        T VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DocumentTypeExt</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Accept&lt;T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, IDocumentVisitor&lt;T&gt; visitor)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> (self)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.Invoice:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitInvoice();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.PrepaymentAccount:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(self), self, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>И да, я предлагаю определять все связанные типы в одном файле, что не является идиоматичным для .Net разработчика. Но иногда это очень ухудшает упрощает понимание кода.</p>
<!-- raw HTML omitted -->
<p>Опишем visitor который будет искать в базе нужный документ <strong>DatabaseSearchVisitor.cs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseSearchVisitor</span> : IDocumentVisitor&lt;IDocument&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> ApiId <span style="color:#ae81ff">_</span>id;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> Database <span style="color:#ae81ff">_d</span>b;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> DatabaseSearchVisitor(ApiId id, Database db)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>id = id;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_d</span>b = db;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> IDocument VisitInvoice() =&gt; <span style="color:#ae81ff">_d</span>b.SearchInvoice(<span style="color:#ae81ff">_</span>id);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> IDocument VisitPrepaymentAccount() =&gt; <span style="color:#ae81ff">_d</span>b.SearchPrepaymentAccount(<span style="color:#ae81ff">_</span>id);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>И потом его использование:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> searchVisitor = <span style="color:#66d9ef">new</span> DatabaseSearchVisitor(doc.Id, <span style="color:#ae81ff">_d</span>b);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Accept(searchVisitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<h1 id="пример-2">Пример 2</h1>
<hr>
<!-- raw HTML omitted -->
<p>У нас есть события, которые выглядят следующим образом:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> PurseEventType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Increase,
</span></span><span style="display:flex;"><span>        Decrease,
</span></span><span style="display:flex;"><span>        Block,
</span></span><span style="display:flex;"><span>        Unlock
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurseEvent</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEventType Type { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Json { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEvent(PurseEventType type, <span style="color:#66d9ef">string</span> json)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Type = type;
</span></span><span style="display:flex;"><span>            Json = json;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Мы хотим отправлять уведомления пользователю на определенный тип событий. Тогда реализуем visitor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IPurseEventTypeVisitor</span>&lt;<span style="color:#66d9ef">out</span> T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        T VisitIncrease();
</span></span><span style="display:flex;"><span>        T VisitDecrease();
</span></span><span style="display:flex;"><span>        T VisitBlock();
</span></span><span style="display:flex;"><span>        T VisitUnlock();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurseEventTypeNotificationVisitor</span> : IPurseEventTypeVisitor&lt;Missing&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> INotificationManager <span style="color:#ae81ff">_</span>notificationManager;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PurseEventParser <span style="color:#ae81ff">_</span>eventParser;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> PurseEvent <span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> PurseEventTypeNotificationVisitor(PurseEvent @event, PurseEventParser eventParser, INotificationManager notificationManager)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager = notificationManager;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span> = @event;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>eventParser = eventParser;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitIncrease() =&gt; Missing.Value;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitDecrease() =&gt; Missing.Value;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitBlock()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> blockEvent = <span style="color:#ae81ff">_</span>eventParser.ParseBlock(<span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager.NotifyBlockPurseEvent(blockEvent);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Missing.Value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Missing VisitUnlock()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> blockEvent = <span style="color:#ae81ff">_</span>eventParser.ParseUnlock(<span style="color:#ae81ff">_</span><span style="color:#66d9ef">event</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>notificationManager.NotifyUnlockPurseEvent(blockEvent);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Missing.Value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Для примера не будем ничего возвращать. Для этого можно воспользоваться типом Missing из System.Reflection или же написать тип Unit. В реальном проекте возвращался бы Result, например, с информацией об ошибке, если такие имеются.</p>
<!-- raw HTML omitted -->
<p>И пример использования:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SendNotification(PurseEvent @event)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> notificationVisitor = <span style="color:#66d9ef">new</span> PurseEventTypeNotificationVisitor(@event, <span style="color:#ae81ff">_</span>eventParser, <span style="color:#ae81ff">_</span>notificationManager);
</span></span><span style="display:flex;"><span>        @event.Type.Accept(notificationVisitor);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<h1 id="дополнение">Дополнение</h1>
<hr>
<!-- raw HTML omitted -->
<h3 id="если-нужно-быстрее">Если нужно быстрее</h3>
<!-- raw HTML omitted -->
<p>Если нужно использовать такой подход там, где важна производительность, в качестве visitor можно использовать структуры. Тогда код изменится следующим образом.</p>
<!-- raw HTML omitted -->
<p>Метод расширение:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Accept&lt;TVisitor, T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, <span style="color:#66d9ef">in</span> TVisitor visitor)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">where</span> TVisitor : IDocumentVisitor&lt;T&gt;
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> (self)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.Invoice:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitInvoice();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> DocumentType.PrepaymentAccount:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> visitor.VisitPrepaymentAccount();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(self), self, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Сам visitor остаётся прежним, только меняем class на struct.</p>
<!-- raw HTML omitted -->
<p>И сам код обновления документа выглядит не так удобно, но работает быстро:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> searchVisitor = <span style="color:#66d9ef">new</span> DatabaseSearchVisitor(doc.Id, <span style="color:#ae81ff">_d</span>b);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Accept&lt;DatabaseSearchVisitor, IDocument&gt;(searchVisitor);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>При таком использовании generic, необходимо уточнять типы самому, так как компилятор не хочет способен вывести их автоматически.</p>
<!-- raw HTML omitted -->
<h3 id="читабельность-и-in-place-реализация">Читабельность и in-place реализация</h3>
<!-- raw HTML omitted -->
<p>Если нужно реализовать логику только в одном месте, то часто visitor — громоздко и не удобно. Поэтому есть альтернативное решение <strong>match</strong>.</p>
<!-- raw HTML omitted -->
<p>Сразу пример со структурой:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> T Match&lt;T&gt;(<span style="color:#66d9ef">this</span> DocumentType self, Func&lt;T&gt; invoiceCase, Func&lt;T&gt; prepaymentAccountCase)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> visitor = <span style="color:#66d9ef">new</span> FuncVisitor&lt;T&gt;(invoiceCase, prepaymentCase);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self.Accept&lt;FuncVisitor&lt;T&gt;, T&gt;(visitor);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Сам <strong>FuncVisitor</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">FuncVisitor</span>&lt;T&gt; : IDocumentVisitor&lt;T&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;T&gt; <span style="color:#ae81ff">_</span>invoiceCase;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;T&gt; <span style="color:#ae81ff">_</span>prepaymentAccountCase;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> FuncVisitor(Func&lt;T&gt; invoiceCase, Func&lt;T&gt; prepaymentAccountCase)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>invoiceCase = invoiceCase;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">_</span>prepaymentAccountCase = prepaymentAccountCase;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> T VisitInvoice() =&gt; <span style="color:#ae81ff">_</span>invoiceCase();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> T VisitPrepaymentAccount() =&gt; <span style="color:#ae81ff">_</span>prepaymentAccountCase();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>Использование <strong>match</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> UpdateStatus(ApiDoc doc)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> databaseDocument = doc.Type.Match(
</span></span><span style="display:flex;"><span>        () =&gt; <span style="color:#ae81ff">_d</span>b.SearchInvoice(doc.Id),
</span></span><span style="display:flex;"><span>        () =&gt; <span style="color:#ae81ff">_d</span>b.SearchPrepaymentAccount(doc.Id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    databaseDocument.Status = doc.Status;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">_d</span>b.SaveChanges();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><!-- raw HTML omitted -->
<h2 id="итог">Итог</h2>
<!-- raw HTML omitted -->
<p>При добавлении нового значения в enum необходимо:</p>
<!-- raw HTML omitted -->
<p>   1.  Добавить метод в интерфейс.</p>
<p>   2.  Добавить его использование в метод расширение.</p>
<!-- raw HTML omitted -->
<p>Для остальных мест компилятор подскажет нам, где необходимо реализовать новый метод.<br>
Таким образом мы избавляемся от проблемы забытого case в switch.</p>
<!-- raw HTML omitted -->
<p>Это все еще не серебряная пуля, но может здорово помочь в работе с enum.</p>
<!-- raw HTML omitted -->
<h2 id="ссылки">Ссылки</h2>
<!-- raw HTML omitted -->
<ul>
<li>
<a href="https://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/" target="_blank">https://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/</a></li>
<li>
<a href="https://en.wikipedia.org/wiki/Unit_type" target="_blank">https://en.wikipedia.org/wiki/Unit_type</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results" target="_blank">https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results</a></li>
</ul>
]]></content></item></channel></rss>